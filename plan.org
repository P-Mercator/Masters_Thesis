# -*- mode: org -*-

#+Author: Pierre Mercatoris
#+Title: Clustering large number of time series.
#+PROPERTY: header-args    :eval no-export


#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/bigblow/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/bigblow/css/bigblow.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/bigblow/css/hideshow.css"/>

#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery-1.11.0.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery-ui-1.10.2.min.js"></script>

#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery.localscroll-min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery.scrollTo-1.4.3.1-min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery.zclip.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/bigblow.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/hideshow.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.min.js"></script>


* Preparing the data

** Reading the data
*** In Python

  I have downloaded all the regions' annual data from 2013 to 2015, the
  consolidated 2016 data as well as the running 2017 data. The data came split
  between files for each 12 regions of France and each year, where each record
  contains the date, the time, the region and the electricity consumption.

  I have needed to correct the names of the regions as those where changed
  (probably by error) on the 29th of February 2016. 

[[http://www.rte-france.com/en/eco2mix/eco2mix-telechargement-en]]

#+BEGIN_SRC ipython :session :exports both :results raw drawer
  from os.path import join
  import glob
  import pandas as pd

  data_path = "data"

  # Combine all the .xls of each region
  data = pd.concat([
      pd.read_table(
          file, encoding="cp1252", delimiter="\t", engine="python",
          index_col=False).iloc[:-1, :]
      for file in glob.glob(join(data_path, "*.xls"))
  ])

  # Format type of variables
  data["Consommation"] = pd.to_numeric(data["Consommation"], errors='coerce')
  data["Datetime"] = pd.to_datetime(
      (data["Date"] + '_' + data["Heures"]).apply(str), format='%Y-%m-%d_%H:%M')

  # Correct regions names
  data.loc[data['Périmètre'] == 'Auvergne et Rhône-Alpes', 'Périmètre'] = 'Auvergne-Rhône-Alpes'
  data.loc[data['Périmètre'] == 'Bourgogne et Franche Comté', 'Périmètre'] = 'Bourgogne-Franche-Comté'
  data.loc[data['Périmètre'] == 'Alsace, Champagne-Ardenne et Lorraine', 'Périmètre'] = 'Grand-Est'
  data.loc[data['Périmètre'] == 'Nord-Pas-de-Calais et Picardie', 'Périmètre'] = 'Hauts-de-France'
  data.loc[data['Périmètre'] == 'Aquitaine, Limousin et Poitou-Charentes', 'Périmètre'] = 'Nouvelle-Aquitaine'
  data.loc[data['Périmètre'] == 'Languedoc-Roussillon et Midi-Pyrénées', 'Périmètre'] = 'Occitanie'
 
  data.head()
  #+END_SRC
  
  #+RESULTS:
  :RESULTS:
  # Out[26]:
  #+BEGIN_EXAMPLE
    Périmètre               Nature        Date Heures  Consommation Thermique  \
    0  Normandie  Données définitives  2013-01-01  00:00           NaN        ND
    1  Normandie  Données définitives  2013-01-01  00:15           NaN       NaN
    2  Normandie  Données définitives  2013-01-01  00:30        3683.0       432
    3  Normandie  Données définitives  2013-01-01  00:45           NaN       NaN
    4  Normandie  Données définitives  2013-01-01  01:00        3549.0       433

    Nucléaire Eolien Solaire Hydraulique Pompage Bioénergies Ech. physiques  \
    0        ND     ND      ND          ND      ND          ND             ND
    1       NaN    NaN     NaN         NaN     NaN         NaN            NaN
    2      8200    216       0          12       -          54          -5233
    3       NaN    NaN     NaN         NaN     NaN         NaN            NaN
    4      8224    190       0          12       -          54          -5366

    Datetime
    0 2013-01-01 00:00:00
    1 2013-01-01 00:15:00
    2 2013-01-01 00:30:00
    3 2013-01-01 00:45:00
    4 2013-01-01 01:00:00
  #+END_EXAMPLE
  :END:

As all the regions are in the same columns, I have used a pivot table to get 1
column per region for each 'Datetime' (1 column for each of 12 regions). Additionally, it is important to set the timezone to UTC in order to account for
daylight saving time change and avoid removing data or introducing NAs.

#+BEGIN_SRC ipython :session :exports both :results raw drawer
  # Reshape to row = datetime and column = region, all values are consumption
  consommation = pd.pivot_table(
      data, values='Consommation', index='Datetime', columns=['Périmètre'])
  # Set timezone as it creates problem when changing between daylight saving times.
  consommation = consommation.tz_localize('UTC', ambiguous=False)
  consommation = consommation.resample('30T').mean()

  consommation.head()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[27]:
#+BEGIN_EXAMPLE
  Périmètre                  Auvergne-Rhône-Alpes  Bourgogne-Franche-Comté  \
  Datetime
  2013-01-01 00:00:00+00:00                   NaN                      NaN
  2013-01-01 00:30:00+00:00                8173.0                   2357.0
  2013-01-01 01:00:00+00:00                7944.0                   2289.0
  2013-01-01 01:30:00+00:00                7896.0                   2326.0
  2013-01-01 02:00:00+00:00                7882.0                   2409.0
  
  Périmètre                  Bretagne  Centre-Val de Loire  Grand-Est  \
  Datetime
  2013-01-01 00:00:00+00:00       NaN                  NaN        NaN
  2013-01-01 00:30:00+00:00    3050.0               2476.0     4943.0
  2013-01-01 01:00:00+00:00    2866.0               2319.0     4811.0
  2013-01-01 01:30:00+00:00    2735.0               2560.0     4840.0
  2013-01-01 02:00:00+00:00    2874.0               2395.0     4897.0
  
  Périmètre                  Hauts-de-France  Ile-de-France  Normandie  \
  Datetime
  2013-01-01 00:00:00+00:00              NaN            NaN        NaN
  2013-01-01 00:30:00+00:00           5989.0         9134.0     3683.0
  2013-01-01 01:00:00+00:00           5832.0         8822.0     3549.0
  2013-01-01 01:30:00+00:00           5926.0         8499.0     3570.0
  2013-01-01 02:00:00+00:00           5695.0         8229.0     3569.0
  
  Périmètre                  Nouvelle-Aquitaine  Occitanie    PACA  \
  Datetime
  2013-01-01 00:00:00+00:00                 NaN        NaN     NaN
  2013-01-01 00:30:00+00:00              5464.0     5228.0  5570.0
  2013-01-01 01:00:00+00:00              5422.0     4955.0  5698.0
  2013-01-01 01:30:00+00:00              5514.0     4888.0  5680.0
  2013-01-01 02:00:00+00:00              5443.0     4881.0  5577.0
  
  Périmètre                  Pays-de-la-Loire
  Datetime
  2013-01-01 00:00:00+00:00               NaN
  2013-01-01 00:30:00+00:00            3595.0
  2013-01-01 01:00:00+00:00            3359.0
  2013-01-01 01:30:00+00:00            3313.0
  2013-01-01 02:00:00+00:00            3383.0
#+END_EXAMPLE
:END:

In those 12 time series we can see some
outliers at the beginning of September 2017 where the data is close to 0. Those
gaps are expected as this data was not yet consolidated.

  #+BEGIN_SRC ipython :session :ipyfile ./img/plotSeries.png :exports both :results raw drawer
    import matplotlib.pyplot as plt
    %matplotlib inline
    
    fig, ax = plt.subplots(4, 3, sharex=True, sharey=True)
    fig.set_size_inches(18,13)
    i = 0
    row = 0
    for column in consommation.columns:
        col = i % 3
        consommation[column].plot(ax=ax[row, col])
        i += 1
        if col == 2:
            row += 1
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[28]:
  [[file:./img/plotSeries.png]]
  :END:
  
In order to make sure we are using
clean data, I have decided to use the records from the 2nd of January 2013 (1st
doesn't have data for midnight) to the 2nd of January 2017.

Furthermore, a second pivot table was used in order to create a column for each
30 minutes of the day. This resulted in a table composed of 576 daily time
series (48 for each of the 12 regions) over 1455 days.

#+BEGIN_SRC ipython :session :exports both :results raw drawer
  import datetime

  consommation["date"] = pd.to_datetime(consommation.index).date
  consommation["time"] = pd.to_datetime(consommation.index).time
  consommation = pd.pivot_table(pd.melt(consommation, id_vars=["date", "time"]),
                                index="date", values="value", columns=["Périmètre", "time"])

  # consommation = consommation.loc[datetime.date(2013,1,2):datetime.date(2017,1,2), :]
  consommation = consommation.loc[datetime.date(2013,1,2):, :]

  # Get rid of the 15 minutes columns (columns with nans)
  # consommation = consommation.loc[:,consommation.isnull().sum()!=consommation.shape[0]]

  consommation.head()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[29]:
#+BEGIN_EXAMPLE
  Périmètre  Auvergne-Rhône-Alpes                                               \
  time                   00:00:00 00:30:00 01:00:00 01:30:00 02:00:00 02:30:00
  date
  2013-01-02               7847.0   7674.0   7427.0   7441.0   7467.0   7550.0
  2013-01-03               9028.0   8839.0   8544.0   8560.0   8569.0   8667.0
  2013-01-04               8982.0   8754.0   8476.0   8480.0   8453.0   8554.0
  2013-01-05               8625.0   8465.0   8165.0   8134.0   8087.0   8149.0
  2013-01-06               8314.0   8097.0   7814.0   7791.0   7785.0   7842.0
  
  Périmètre                                        ...    Pays-de-la-Loire  \
  time       03:00:00 03:30:00 04:00:00 04:30:00   ...            19:00:00
  date                                             ...
  2013-01-02   7434.0   7371.0   7233.0   7311.0   ...              4336.0
  2013-01-03   8559.0   8483.0   8390.0   8392.0   ...              4279.0
  2013-01-04   8436.0   8386.0   8224.0   8195.0   ...              4181.0
  2013-01-05   7974.0   7897.0   7713.0   7597.0   ...              3877.0
  2013-01-06   7670.0   7605.0   7418.0   7352.0   ...              3854.0
  
  Périmètre                                                                  \
  time       19:30:00 20:00:00 20:30:00 21:00:00 21:30:00 22:00:00 22:30:00
  date
  2013-01-02   4228.0   4079.0   3923.0   3756.0   3565.0   3457.0   3510.0
  2013-01-03   4166.0   4038.0   3862.0   3712.0   3463.0   3308.0   3394.0
  2013-01-04   4123.0   3946.0   3755.0   3597.0   3559.0   3412.0   3456.0
  2013-01-05   3786.0   3696.0   3540.0   3449.0   3296.0   3221.0   3296.0
  2013-01-06   3834.0   3826.0   3771.0   3631.0   3494.0   3423.0   3420.0
  
  Périmètre
  time       23:00:00 23:30:00
  date
  2013-01-02   4003.0   3710.0
  2013-01-03   3909.0   3700.0
  2013-01-04   3903.0   3662.0
  2013-01-05   3864.0   3700.0
  2013-01-06   3942.0   3717.0
  
  [5 rows x 576 columns]
#+END_EXAMPLE
:END:

With minimal data manipulation, I was able to format the data into 48 daily
series for each of the regions and get rid of all the 'missing' values.

#+BEGIN_SRC ipython :session :exports both :results output
print('Data dimensions: ', consommation.shape)
print('Number of NA values: ', consommation.isnull().sum().sum())
#+END_SRC

#+RESULTS:
: Data dimensions:  (1794, 576)
: Number of NA values:  0

As you can see, this gives us a matrix of 1794 rows (days) and 576 columns (48
half-hour of each 12 regions per day), with no NA values.

This data is now saved into a csv to read from R.

#+BEGIN_SRC ipython :session :exports both :results raw drawer
  # Merge multi index column names to read in R
  consommation.columns = [col[0] + '_' + str(col[1]) for col in consommation.columns.values]
  # Save to access from R
  consommation.to_csv(join(data_path, "consommation.csv"))
  # consommation = pd.read_csv(join(data_path, "consommation.csv"),index_col=[0], header=[0,1])
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[31]:
:END:

*** In R (NOT USED ANYMORE!)
#+BEGIN_SRC R :session :exports code :results silent
  library(tidyverse)
  library(lubridate)
#+END_SRC

#+BEGIN_SRC R :session :exports both :results output drawer
  data <- read.csv("data/all_raw.csv", row.names=NULL, encoding="cp1252")
  data$Date <- parse_date(data$Date)
  data$Heures <- parse_time(data$Heures)
  data$Consommation <- data$Consommation %>%
    as.character() %>%
    parse_double(na = c("", "NA", "-"))

  data <- data %>%
    select(c("Périmètre", "Consommation", "Date", "Heures"))%>%
    filter(Périmètre != "France")

  goodRegions <- data %>%
    spread(key=Périmètre, value = Consommation) %>%
    is.na() %>%
    colMeans() < 0.5

  goodRegions<- names(which(goodRegions))
  data <- data[data$Périmètre %in% goodRegions, ]
#+END_SRC

#+RESULTS:
:RESULTS:
:END:

#+BEGIN_SRC R :session :exports both :results output graphics :file ./img/r_xts_outliers.png
  library(xts)

  data.byPerimetre<- data %>%
    spread(key=Périmètre, value=Consommation) %>%
    filter(Date > ymd("2013-01-01"))

  dates <- as.POSIXct(paste(data.byPerimetre$Date, data.byPerimetre$Heures), format="%Y-%m-%d %H:%M:%S", tz="UTC")
  regions.xts <- xts(data.matrix(data.byPerimetre[, c(-1,-2)]),order.by=dates)

  ep <- endpoints(regions.xts, "minutes", k=30)
  halfHour.xts <- period.apply(na.locf(regions.xts), INDEX = ep, FUN = mean)

  plot.xts(halfHour.xts)
#+END_SRC

#+RESULTS:
[[file:./img/r_xts_outliers.png]]
 
#+BEGIN_SRC R :session :exports both :results output graphics :file ./img/r_xts.png
  ## From 1st of september 2017, we get 15 minutes measurements
  data.byPerimetre<- data %>%
    spread(key=Périmètre, value=Consommation) %>%
    filter(Date > ymd("2013-01-01")) %>%
      filter(Date < ymd("2017-09-01"))

  dates <- as.POSIXct(paste(data.byPerimetre$Date, data.byPerimetre$Heures), format="%Y-%m-%d %H:%M:%S", tz="UTC")
  regions.xts <- xts(data.matrix(data.byPerimetre[, c(-1,-2)]),order.by=dates)

  ep <- endpoints(regions.xts, "minutes", k=30)
  halfHour.xts <- period.apply(na.locf(regions.xts), INDEX = ep, FUN = mean)

  plot.xts(halfHour.xts)
#+END_SRC

#+RESULTS:
[[file:./img/r_xts.png]]


#+BEGIN_SRC R :session :exports both :results table :colnames yes :rownames yes
  tHourly <- function(x) {
    ## print(index(x[1]))
    # initialize result matrix for all 48 half-hour
    dnames <- list(paste0(date(index(x))[1]),
                   paste0("H", seq(0,23.5,0.5), rep(colnames(x), each = 48)))
    res <- matrix(NA, 1, dim(x)[2] * 48, dimnames = dnames)
    # update result object and return
    res[,] <- unlist(split(t(x), seq(ncol(x))))
    res
  }

  # split on days, apply tHourly to each day, rbind results
  p_mat <- split(halfHour.xts, f="days", drop=FALSE, k=1)
  p_list <- lapply(p_mat, tHourly)
  p_hmat <- do.call(rbind, p_list)

  head(p_hmat[,1:2])
#+END_SRC

#+RESULTS:
|            | H0Auvergne-Rhône-Alpes | H0.5Auvergne-Rhône-Alpes |
|------------+------------------------+--------------------------|
| 2013-01-02 |                   7847 |                     7674 |
| 2013-01-03 |                   9028 |                     8839 |
| 2013-01-04 |                   8982 |                     8754 |
| 2013-01-05 |                   8625 |                     8465 |
| 2013-01-06 |                   8314 |                     8097 |
| 2013-01-07 |                   8312 |                     8214 |

#+BEGIN_SRC R :session :exports both :results output drawer
dim(p_hmat)
sum(is.na(p_hmat))
#+END_SRC

#+RESULTS:
:RESULTS:
[1] 1703  576
[1] 0
:END:


** Transform the data
*** Stationarity


 As all the series are daily values there is a strong weekly seasonality within
 the raw values. Looking at the decomposition of one of the series, we can also
 clearly see the yearly seasonality.

 #+BEGIN_SRC R :session :exports both :results output graphics :file ./img/decompose_R.png
   library(tidyverse)
   library(xts)


   consommation <- read.csv('./data/consommation.csv', row.names='date')

   ## consommation <- xts(consommation, order.by = as.Date(as.POSIXct(parse_date(rownames(consommation)))))

   ts1 = ts(consommation[,1], frequency = 375, start = 2013)
   plot(decompose(ts1))
 #+END_SRC

 #+RESULTS:
 [[file:./img/decompose_R.png]]

In order to transform the data to stationary series, we need to study the
 autocorrelation function. The black lines show the autocorrelation function until lag 100
 of each individual series, while the red one is the function of the mean of the
 series. That first autocorrelation clearly shows the weekly seasonality.

 #+BEGIN_SRC R :session :exports both :results output graphics :file ./img/acf0_R.png
   plot(acf(consommation[,1], lag=100), type="l", max.mfrow=1, ylim=c(-0.4, 1))
   for (i in 2:dim(consommation)[2]){
     lines(acf(consommation[,i], lag=100, plot=FALSE)$acf[-1, 1,1], lty=1, lwd=0.1, alpha=0.8)
   }
   lines(acf(rowMeans(consommation), lag=100, plot=FALSE)$acf[-1, 1,1], lty=1, lwd=2, col='red')
 #+END_SRC

 #+RESULTS:
 [[file:./img/acf0_R.png]]
 
To try and remove it, I have taken the weekly difference (difference between all
the values separated by 7 days). Now there is still some correlation, but it is better.

 #+BEGIN_SRC R :session :exports both :results output graphics :file ./img/acf1_R.png
   consommation = diff(as.matrix(consommation), 7)
   plot(acf(consommation[,1], lag=100), type="l", max.mfrow=1, ylim=c(-0.4, 1))
   for (i in 2:dim(consommation)[2]){
     lines(acf(consommation[,i], lag=100, plot=FALSE)$acf[-1, 1,1], lty=1, lwd=0.1, alpha=0.8)
   }
   lines(acf(rowMeans(consommation), lag=100, plot=FALSE)$acf[-1, 1,1], lty=1, lwd=2, col='red')
 #+END_SRC
 
 #+RESULTS:
 [[file:./img/acf1_R.png]]

So as to get as close stationarity as possible without loosing too much data, I
have taken another difference, but this time only 1 day. Now, most of the values
stay within the confidence interval.

 #+BEGIN_SRC R :session :exports both :results output graphics :file ./img/acf17_R.png
   consommation = diff(consommation, 1)
   plot(acf(consommation[,1], lag=100), type="l", max.mfrow=1, ylim=c(-0.4, 1))
   for (i in 2:dim(consommation)[2]){
     lines(acf(consommation[,i], lag=100, plot=FALSE)$acf[-1, 1,1], lty=1, lwd=0.1, alpha=0.8)
   }
   lines(acf(rowMeans(consommation), lag=100, plot=FALSE)$acf[-1, 1,1], lty=1, lwd=2, col='red')
 #+END_SRC

 #+RESULTS:
 [[file:./img/acf17_R.png]]

 I have then used the Dickey-Fuller test on all the series and confirmed that
 all the series are now significantly stationary (all p-values lower than 0.01).

 #+BEGIN_SRC R :session :exports both :results output drawer
   library(fpp)

   max_p = 0
   for (i in 2:dim(consommation)[2]){
     p = adf.test(consommation[,i], alternative='stationary')$p.value
     if (p > max_p){
       max_p <- p
     }
   }
   print(paste(c('All values below', max_p), collapse=' '))
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 There were 50 or more warnings (use warnings() to see the first 50)
 [1] "All values below 0.01"
 :END:

 
In Python, I have done exactly the same thing and can see that we can the exact
same autocorrelation function.

 #+BEGIN_SRC ipython :session :ipyfile ./img/acf_python.png  :exports both :results raw drawer
   from statsmodels.tsa.stattools import acf
   import pandas as pd
   import matplotlib.pyplot as plt
  from os.path import join
   %matplotlib inline

  data_path = "data"

   consommation = pd.read_csv(join(data_path, 'consommation.csv'), index_col=0)
   consommation = consommation.diff(1).diff(7).iloc[8:,:]

   plt.figure()
   ax = plt.gca()
   for columns in consommation:
       plt.plot(acf(consommation.loc[:,columns], nlags=100), alpha=0.05, color="black")
   plt.plot(acf(consommation.mean(axis=1), nlags=100), color='red')
   ax.set_xlabel("Lag")
   ax.set_ylabel("Autocorrelation")
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[1]:
 : Text(0,0.5,'Autocorrelation')
 [[file:./img/acf_python.png]]
 :END:
 
In Python is was possible to get the exact p-values and show that the largest
p-value is actually of order 10^{-22}.
 
   #+BEGIN_SRC ipython :session :exports both :results raw drawer
   from statsmodels.tsa.stattools import adfuller

 def test_stationarity(timeseries):
     # Perform Dickey-Fuller test:
     dftest = adfuller(timeseries, autolag="AIC")
     dfoutput = pd.Series(dftest[0:4], index=['Test Statistic', 'p-value', '#Lags Used', 'Number of Observations Used'])
     for key, value in dftest[4].items():
         dfoutput['Critical Value (%s)' % key] = value
     return dfoutput

 p_values = consommation.apply(lambda x: test_stationarity(x)["p-value"])
 p_values.max()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[4]:
   : 1.6017214722253976e-22
   :END:
  
*** Data standardisation
   
 In order to standardise the data and get a mean of 0 and standard deviation of
 1, the z-score was applied to each individual series.

 $$Z = \frac{x - \mu}{\sigma}$$
 
#+BEGIN_SRC R :session :exports both :results output drawer
  consommation <- scale(consommation)

  print(mean(consommation[,1]))
  print(sd(consommation[,1]))
#+END_SRC

#+RESULTS:
:RESULTS:
[1] -1.414671e-17
[1] 1
:END:
 

#+BEGIN_SRC ipython :session :exports both :results output drawer
  from scipy.stats.mstats import zscore
  consommation = consommation.apply(zscore, axis=0)
  print('Mean of z score is between', consommation.mean().min(), ' and ', consommation.mean().max())
  print('Std of z score is between', consommation.std().min(), ' and ', consommation.std().max())
#+END_SRC

#+RESULTS:
:RESULTS:
Mean of z score is between -3.45623741149e-17  and  2.94650455584e-17
Std of z score is between 1.00028007282  and  1.00028007282
:END:

   
* Calculation of GCC

** Selection of k
*** PACF

   At first I decided to check for the order of AR from our times series by
   looking at the 'partial autocorrelation function', which is the autocorrelation
   of the series but controlling for the correlations between values at shorter
   lags.

 #+BEGIN_SRC ipython :session :ipyfile ./img/pacf_python.png  :exports both :results raw drawer
   from statsmodels.tsa.stattools import pacf    
   import numpy as np

   plt.figure()
   ax = plt.gca()
   all_pacf = np.array([pacf(consommation.loc[:,columns], nlags=100) for columns in consommation])
   mean_pacf = pacf(consommation.mean(axis=1).values, nlags=100)
   plt.axhline(1.96/np.sqrt(len(mean_pacf)), color='red')
   plt.axhline(-1.96/np.sqrt(len(mean_pacf)), color='red')
   for p in all_pacf:
       plt.plot(p, alpha=0.05, color="black")
   plt.plot(pacf(consommation.mean(axis=1), nlags=100), color='red')
   ax.set_xlabel("Lag")
   ax.set_ylabel("Partial Autocorrelation")
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[42]:
 : Text(0,0.5,'Partial Autocorrelation')
 [[file:./img/pacf_python.png]]
 :END:

I then looked at those local minimums (for each 10 lag interval) by first getting the minimums of the mean
pacf (red line).

   #+BEGIN_SRC ipython :session :results raw drawer :exports both
     mean_pacf = pacf(consommation.mean(axis=1).values, nlags=100)
     orders = [r[0] + mean_pacf[r[0] : r[1]].argmin()
      for r in zip(np.arange(0, 100, 10), np.arange(10, 110, 10))]
     orders
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[43]:
   : [7, 14, 21, 35, 42, 56, 63, 70, 84, 98]
   :END:

And then I checked the minimum across all the series, so as to make sure that
the order was large enough for all series. The values are the same originally
but deviate at larger lag. It seems that 21 is the largest significant order.

   #+BEGIN_SRC ipython :session :results raw drawer :exports both
     orders = [r[0] + np.where(all_pacf[:, r[0]:r[1]] == all_pacf[:, r[0]:r[1]].min())[1][0]
         for r in zip(np.arange(0, 100, 10), np.arange(10, 110, 10))]
     orders
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[44]:
   : [7, 14, 21, 35, 42, 56, 63, 77, 84, 91]
   :END:

*** AR model fitting
    
By fitting an AR model to each series with a maximum lag 40, python was able to
get a k value of 37.

#+BEGIN_SRC ipython :session :exports both :eval no
import statsmodels.tsa.ar_model as ar
k = consommation.apply(lambda x: ar.AR(x).select_order(maxlag=40, ic="bic", trend="nc")).max()
k
#+END_SRC

#+RESULTS:
: : 37

However, in R, k is 17.

#+BEGIN_SRC R :session :exports both :results output drawer :eval no
  library(FitAR)

  getOrder <- function(ts, order.max=40) {
    SelectModel(ts, ARModel = 'AR', Criterion = 'BIC', lag.max = 20)[1,1]
  }

  k <- max(apply(consommation, 2, getOrder))
  print(k)
#+END_SRC

#+RESULTS:
:RESULTS:
[1] 17
:END:

#+BEGIN_SRC ipython :session
k=17
#+END_SRC

#+RESULTS:
: # Out[2]:


** GCC

  #+BEGIN_SRC ipython :session :results output code :exports both 
    import numpy as np
    from scipy.spatial.distance import pdist
    from scipy.spatial.distance import squareform
    import itertools
    import pickle


    def k_matrix(ts, k):
        T = ts.shape[0]
        return np.array([ts[(shift):T - k + shift]
                         for shift in np.arange(0, k + 1)])

    def get_GCC(ts1, ts2):
        k = 17
        Xi = k_matrix(ts1, k)
        Xj = k_matrix(ts2, k)
        Xij = np.concatenate((Xi, Xj))
        # GCC = 1 - np.linalg.det(np.corrcoef(Xij)) ** (1 / (2 * (k + 1))) / (
        #     np.linalg.det(np.corrcoef(Xi)) ** (1 / (2 * (k + 1))) \
        #     * np.linalg.det(np.corrcoef(Xj)) ** (1 / (2 * (k + 1))) )
        GCC = np.linalg.det(np.corrcoef(Xij)) ** (1 / (k + 1)) / (
            np.linalg.det(np.corrcoef(Xi)) ** (1 / (k + 1)) \
            ,* np.linalg.det(np.corrcoef(Xj)) ** (1 / (k + 1)) )
        return GCC

    pdist_gcc = pdist(consommation.values.T, get_GCC)
    DM_GCC = squareform(pdist_gcc)
    # DM_GCC = np.zeros((consommation.shape[1], consommation.shape[1]))
    # for i, j in itertools.combinations(range(consommation.shape[1]), 2):
    #     DM_GCC[i, j] = DM_GCC[j, i] = 1 - get_GCC(np_consommation[:, i], np_consommation[:, j], k)
    DM_GCC = pd.DataFrame(DM_GCC, index=consommation.columns, columns=consommation.columns)
  #+END_SRC 

  #+RESULTS:
  #+BEGIN_SRC ipython
  #+END_SRC

  #+BEGIN_SRC ipython :session :results output code :exports both 
    import scipy.cluster.hierarchy as hcl
    from scipy.spatial.distance import pdist

    linkage_gcc = hcl.ward(pdist_gcc)
    hcl.cophenet(linkage_gcc, pdist_gcc)

    pdist_euc = pdist(consommation.values.T)
    linkage_euc = hcl.ward(pdist_euc)
    hcl.cophenet(linkage_euc, pdist_euc)
  #+END_SRC 



#+BEGIN_SRC ipython :session :exports none :eval no
pickle.dump(DM_GCC, open(join(data_path, "DM_GCC_21.p"), "wb"))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :exports none
import pickle
from os.path import join

data_path = 'data'

DM_GCC = pickle.load(open(join(data_path, "DM_GCC_21.p"), "rb"))
#+END_SRC

#+RESULTS:
: # Out[8]:


#+BEGIN_SRC R :session
  kMatrix <- function(ts, k) {
    m <- ts[1 : (length(ts) - k)]
    for (i in seq(k)[2:k]) {
      m <- cbind(m, ts[i : (length(ts) - k + i - 1)])
    }
    m
  }

  GCC <- function(ts1, ts2, k) {
    Xi <-  kMatrix(ts1, k)
    Xj <-  kMatrix(ts2, k)

    Xij <- cbind(Xi, Xj)

    1 - det(cor(Xij))^(1/(2*(k+1))) /
      (det(cor(Xi))^(1/(2*(k+1))) * det(cor(Xj))^(1/(2*(k+1))))
  }

  combinations <- combn(dim(consommation)[2], 2)
  DM_GCC <- matrix(0, dim(consommation)[2], dim(consommation)[2])
  for (d in seq(dim(combinations)[2])) {
    distance <- GCC(consommation[, combinations[,d][1]],
                    consommation[, combinations[,d][2]], k)
    DM_GCC[combinations[,d][1], combinations[,d][2]] <- distance
    DM_GCC[combinations[,d][2], combinations[,d][1]] <- distance
  }
#+END_SRC

* Clustering
 #+BEGIN_SRC ipython :session :exports both :results raw drawer
     import inspect

     import numpy as np
     from statsmodels.tsa.stattools import pacf    
     import statsmodels.tsa.api as smt

     import src.helpers as helpers
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 :END:

** Determination of the number of clusters
  #+BEGIN_SRC ipython :session :ipyfile  :exports both
import scipy.cluster.hierarchy as hcl
from scipy.spatial.distance import squareform
import numpy as np

linkage = hcl.ward(squareform(DM_GCC))
  #+END_SRC

  #+RESULTS:
  : # Out[7]:

#+BEGIN_SRC ipython :session :ipyfile ./img/dendrogram.png :exports both :results raw drawer
from scipy.cluster.hierarchy import dendrogram
dendrogram(linkage)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[382]:
#+BEGIN_EXAMPLE
  {'color_list': ['g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'g',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'r',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'b',
  'b'],
  'dcoord': [[0.0, 0.021182536789780496, 0.021182536789780496, 0.0],
  [0.0, 0.049446557326836199, 0.049446557326836199, 0.021182536789780496],
  [0.0, 0.022370403978454172, 0.022370403978454172, 0.0],
  [0.0, 0.022834506770670844, 0.022834506770670844, 0.0],
  [0.022370403978454172,
  0.097077954750618534,
  0.097077954750618534,
  0.022834506770670844],
  [0.049446557326836199,
  0.31146856496080838,
  0.31146856496080838,
  0.097077954750618534],
  [0.0, 0.016762578899149748, 0.016762578899149748, 0.0],
  [0.0, 0.022890947952176586, 0.022890947952176586, 0.0],
  [0.016762578899149748,
  0.051735061318592679,
  0.051735061318592679,
  0.022890947952176586],
  [0.0, 0.024066979037398371, 0.024066979037398371, 0.0],
  [0.0, 0.012451848599929476, 0.012451848599929476, 0.0],
  [0.0, 0.015843311634362003, 0.015843311634362003, 0.0],
  [0.012451848599929476,
  0.039771872997834065,
  0.039771872997834065,
  0.015843311634362003],
  [0.024066979037398371,
  0.09481494012266399,
  0.09481494012266399,
  0.039771872997834065],
  [0.051735061318592679,
  0.17039194904324353,
  0.17039194904324353,
  0.09481494012266399],
  [0.0, 0.031506518958307445, 0.031506518958307445, 0.0],
  [0.0, 0.034959505595411694, 0.034959505595411694, 0.0],
  [0.0, 0.046763218001584679, 0.046763218001584679, 0.0],
  [0.034959505595411694,
  0.10296880129549965,
  0.10296880129549965,
  0.046763218001584679],
  [0.031506518958307445,
  0.21390800941324406,
  0.21390800941324406,
  0.10296880129549965],
  [0.17039194904324353,
  0.6465361908650078,
  0.6465361908650078,
  0.21390800941324406],
  [0.31146856496080838,
  0.7525735303141643,
  0.7525735303141643,
  0.6465361908650078],
  [0.0, 0.06847202234193446, 0.06847202234193446, 0.0],
  [0.0, 0.091027678893503911, 0.091027678893503911, 0.06847202234193446],
  [0.0, 0.050855207915002761, 0.050855207915002761, 0.0],
  [0.0, 0.071374850663687595, 0.071374850663687595, 0.0],
  [0.050855207915002761,
  0.13197333654810381,
  0.13197333654810381,
  0.071374850663687595],
  [0.091027678893503911,
  0.3037696713635063,
  0.3037696713635063,
  0.13197333654810381],
  [0.0, 0.028636330902213042, 0.028636330902213042, 0.0],
  [0.0, 0.02948526478597524, 0.02948526478597524, 0.0],
  [0.028636330902213042,
  0.098476964603145076,
  0.098476964603145076,
  0.02948526478597524],
  [0.0, 0.038154569752871251, 0.038154569752871251, 0.0],
  [0.0, 0.043037049611809396, 0.043037049611809396, 0.0],
  [0.038154569752871251,
  0.11164414538997533,
  0.11164414538997533,
  0.043037049611809396],
  [0.0, 0.032444954900709706, 0.032444954900709706, 0.0],
  [0.0, 0.035784877744082733, 0.035784877744082733, 0.0],
  [0.032444954900709706,
  0.074131390569348019,
  0.074131390569348019,
  0.035784877744082733],
  [0.0, 0.029589191577587541, 0.029589191577587541, 0.0],
  [0.0, 0.021538147313199061, 0.021538147313199061, 0.0],
  [0.0, 0.025134245318582892, 0.025134245318582892, 0.0],
  [0.021538147313199061,
  0.051410036139318174,
  0.051410036139318174,
  0.025134245318582892],
  [0.029589191577587541,
  0.083360697412043466,
  0.083360697412043466,
  0.051410036139318174],
  [0.074131390569348019,
  0.25284521522196651,
  0.25284521522196651,
  0.083360697412043466],
  [0.11164414538997533,
  0.37080255136049467,
  0.37080255136049467,
  0.25284521522196651],
  [0.098476964603145076,
  0.55574574156429979,
  0.55574574156429979,
  0.37080255136049467],
  [0.3037696713635063,
  0.9882138283344869,
  0.9882138283344869,
  0.55574574156429979],
  [0.7525735303141643,
  1.4836612325111613,
  1.4836612325111613,
  0.9882138283344869],
  [0.0, 0.042018053764949326, 0.042018053764949326, 0.0],
  [0.0, 0.014401542463789396, 0.014401542463789396, 0.0],
  [0.0, 0.016147115609776708, 0.016147115609776708, 0.0],
  [0.0, 0.030272040030224007, 0.030272040030224007, 0.016147115609776708],
  [0.014401542463789396,
  0.079065435661820407,
  0.079065435661820407,
  0.030272040030224007],
  [0.042018053764949326,
  0.17101509283806413,
  0.17101509283806413,
  0.079065435661820407],
  [0.0, 0.02288341857997326, 0.02288341857997326, 0.0],
  [0.0, 0.042702885950713552, 0.042702885950713552, 0.02288341857997326],
  [0.0, 0.019682550723049291, 0.019682550723049291, 0.0],
  [0.0, 0.034128538675672955, 0.034128538675672955, 0.019682550723049291],
  [0.0, 0.037435775821976436, 0.037435775821976436, 0.0],
  [0.034128538675672955,
  0.10842771558957566,
  0.10842771558957566,
  0.037435775821976436],
  [0.042702885950713552,
  0.17224829251060272,
  0.17224829251060272,
  0.10842771558957566],
  [0.17101509283806413,
  0.51616852969358729,
  0.51616852969358729,
  0.17224829251060272],
  [0.0, 0.018123044334763642, 0.018123044334763642, 0.0],
  [0.0, 0.031245266607062304, 0.031245266607062304, 0.0],
  [0.018123044334763642,
  0.093951505191528548,
  0.093951505191528548,
  0.031245266607062304],
  [0.0, 0.030393896271793563, 0.030393896271793563, 0.0],
  [0.0, 0.014819344099272672, 0.014819344099272672, 0.0],
  [0.0, 0.014855069162748119, 0.014855069162748119, 0.0],
  [0.014819344099272672,
  0.046705027733485081,
  0.046705027733485081,
  0.014855069162748119],
  [0.030393896271793563,
  0.10552369981481491,
  0.10552369981481491,
  0.046705027733485081],
  [0.093951505191528548,
  0.30439710711355084,
  0.30439710711355084,
  0.10552369981481491],
  [0.0, 0.046042971446466775, 0.046042971446466775, 0.0],
  [0.0, 0.020711605115157437, 0.020711605115157437, 0.0],
  [0.0, 0.015504552112254865, 0.015504552112254865, 0.0],
  [0.0, 0.018437591837156462, 0.018437591837156462, 0.0],
  [0.015504552112254865,
  0.052578193652461934,
  0.052578193652461934,
  0.018437591837156462],
  [0.020711605115157437,
  0.1247903354873818,
  0.1247903354873818,
  0.052578193652461934],
  [0.046042971446466775,
  0.20949109651095324,
  0.20949109651095324,
  0.1247903354873818],
  [0.0, 0.054288656490138178, 0.054288656490138178, 0.0],
  [0.0, 0.066046118257171604, 0.066046118257171604, 0.0],
  [0.054288656490138178,
  0.10684081116735872,
  0.10684081116735872,
  0.066046118257171604],
  [0.0, 0.04921536273751638, 0.04921536273751638, 0.0],
  [0.0, 0.0673470224153042, 0.0673470224153042, 0.04921536273751638],
  [0.0, 0.079894319074922837, 0.079894319074922837, 0.0673470224153042],
  [0.0, 0.12728858573327037, 0.12728858573327037, 0.079894319074922837],
  [0.10684081116735872,
  0.27562659546674273,
  0.27562659546674273,
  0.12728858573327037],
  [0.20949109651095324,
  0.68674455660129652,
  0.68674455660129652,
  0.27562659546674273],
  [0.30439710711355084,
  0.86600168465183247,
  0.86600168465183247,
  0.68674455660129652],
  [0.51616852969358729,
  1.4374637217143873,
  1.4374637217143873,
  0.86600168465183247],
  [0.0, 0.059113422647803643, 0.059113422647803643, 0.0],
  [0.0, 0.074609620876853411, 0.074609620876853411, 0.059113422647803643],
  [0.0, 0.053281903180782735, 0.053281903180782735, 0.0],
  [0.0, 0.062463367641767388, 0.062463367641767388, 0.0],
  [0.053281903180782735,
  0.092878174136161951,
  0.092878174136161951,
  0.062463367641767388],
  [0.074609620876853411,
  0.15093349407188478,
  0.15093349407188478,
  0.092878174136161951],
  [0.0, 0.064175659795642881, 0.064175659795642881, 0.0],
  [0.0, 0.083010755841909936, 0.083010755841909936, 0.064175659795642881],
  [0.0, 0.0627226452832816, 0.0627226452832816, 0.0],
  [0.0, 0.065239060167981505, 0.065239060167981505, 0.0],
  [0.0627226452832816,
  0.12453418815134598,
  0.12453418815134598,
  0.065239060167981505],
  [0.083010755841909936,
  0.22776013454985247,
  0.22776013454985247,
  0.12453418815134598],
  [0.15093349407188478,
  0.42891054463344663,
  0.42891054463344663,
  0.22776013454985247],
  [0.0, 0.11960731943288308, 0.11960731943288308, 0.0],
  [0.0, 0.13685397776434657, 0.13685397776434657, 0.11960731943288308],
  [0.0, 0.12843969953226922, 0.12843969953226922, 0.0],
  [0.0, 0.16357192996339567, 0.16357192996339567, 0.12843969953226922],
  [0.13685397776434657,
  0.26031926040268272,
  0.26031926040268272,
  0.16357192996339567],
  [0.0, 0.070806318521845477, 0.070806318521845477, 0.0],
  [0.0, 0.094496539969902468, 0.094496539969902468, 0.070806318521845477],
  [0.0, 0.082878052521195053, 0.082878052521195053, 0.0],
  [0.0, 0.1081567934599561, 0.1081567934599561, 0.0],
  [0.082878052521195053,
  0.15481590810481308,
  0.15481590810481308,
  0.1081567934599561],
  [0.094496539969902468,
  0.2873778768420121,
  0.2873778768420121,
  0.15481590810481308],
  [0.26031926040268272,
  0.6899484357443445,
  0.6899484357443445,
  0.2873778768420121],
  [0.42891054463344663,
  1.0650315536232224,
  1.0650315536232224,
  0.6899484357443445],
  [0.0, 0.019942234931962365, 0.019942234931962365, 0.0],
  [0.0, 0.033794979257414232, 0.033794979257414232, 0.019942234931962365],
  [0.0, 0.021559674114552677, 0.021559674114552677, 0.0],
  [0.0, 0.021561279253235185, 0.021561279253235185, 0.0],
  [0.021559674114552677,
  0.07820866038907473,
  0.07820866038907473,
  0.021561279253235185],
  [0.033794979257414232,
  0.20790077107367352,
  0.20790077107367352,
  0.07820866038907473],
  [0.0, 0.016498068604079656, 0.016498068604079656, 0.0],
  [0.0, 0.027688897907278458, 0.027688897907278458, 0.016498068604079656],
  [0.0, 0.016922448672812739, 0.016922448672812739, 0.0],
  [0.0, 0.017946568157008534, 0.017946568157008534, 0.0],
  [0.016922448672812739,
  0.047192494094483131,
  0.047192494094483131,
  0.017946568157008534],
  [0.027688897907278458,
  0.11084901138306734,
  0.11084901138306734,
  0.047192494094483131],
  [0.0, 0.029618668492954053, 0.029618668492954053, 0.0],
  [0.0, 0.059612696814526002, 0.059612696814526002, 0.029618668492954053],
  [0.0, 0.025776756089080696, 0.025776756089080696, 0.0],
  [0.0, 0.031937412400939953, 0.031937412400939953, 0.0],
  [0.025776756089080696,
  0.086740820754942174,
  0.086740820754942174,
  0.031937412400939953],
  [0.059612696814526002,
  0.24230554755414846,
  0.24230554755414846,
  0.086740820754942174],
  [0.11084901138306734,
  0.45420464692164148,
  0.45420464692164148,
  0.24230554755414846],
  [0.20790077107367352,
  0.60665930858041617,
  0.60665930858041617,
  0.45420464692164148],
  [0.0, 0.032289094651258239, 0.032289094651258239, 0.0],
  [0.0, 0.039807404830557516, 0.039807404830557516, 0.0],
  [0.032289094651258239,
  0.10396300887813648,
  0.10396300887813648,
  0.039807404830557516],
  [0.0, 0.031140912680432929, 0.031140912680432929, 0.0],
  [0.0, 0.037508786352085544, 0.037508786352085544, 0.0],
  [0.031140912680432929,
  0.1044593104653106,
  0.1044593104653106,
  0.037508786352085544],
  [0.10396300887813648,
  0.3314866512281876,
  0.3314866512281876,
  0.1044593104653106],
  [0.0, 0.019647136468066921, 0.019647136468066921, 0.0],
  [0.0, 0.020928924027288829, 0.020928924027288829, 0.0],
  [0.019647136468066921,
  0.086347932953534462,
  0.086347932953534462,
  0.020928924027288829],
  [0.0, 0.01405643760284429, 0.01405643760284429, 0.0],
  [0.0, 0.015838706765498242, 0.015838706765498242, 0.0],
  [0.01405643760284429,
  0.041707531326127964,
  0.041707531326127964,
  0.015838706765498242],
  [0.0, 0.016578929899024836, 0.016578929899024836, 0.0],
  [0.0, 0.02180821656037225, 0.02180821656037225, 0.0],
  [0.016578929899024836,
  0.057881771411505453,
  0.057881771411505453,
  0.02180821656037225],
  [0.041707531326127964,
  0.13743352464606901,
  0.13743352464606901,
  0.057881771411505453],
  [0.086347932953534462,
  0.34955883429335621,
  0.34955883429335621,
  0.13743352464606901],
  [0.3314866512281876,
  0.70325542983519784,
  0.70325542983519784,
  0.34955883429335621],
  [0.60665930858041617,
  1.6595328116442798,
  1.6595328116442798,
  0.70325542983519784],
  [1.0650315536232224,
  1.9221192425422191,
  1.9221192425422191,
  1.6595328116442798],
  [1.4374637217143873,
  2.8918390004650272,
  2.8918390004650272,
  1.9221192425422191],
  [1.4836612325111613,
  3.2493031862907253,
  3.2493031862907253,
  2.8918390004650272],
  [0.0, 0.11566516570214692, 0.11566516570214692, 0.0],
  [0.0, 0.0919467641216931, 0.0919467641216931, 0.0],
  [0.0, 0.136010666971427, 0.136010666971427, 0.0],
  [0.0919467641216931,
  0.19880411965861486,
  0.19880411965861486,
  0.136010666971427],
  [0.11566516570214692,
  0.27502665847100066,
  0.27502665847100066,
  0.19880411965861486],
  [0.0, 0.16111860725023408, 0.16111860725023408, 0.0],
  [0.0, 0.24214531511452872, 0.24214531511452872, 0.16111860725023408],
  [0.0, 0.12656483443999736, 0.12656483443999736, 0.0],
  [0.0, 0.16150066118959602, 0.16150066118959602, 0.0],
  [0.12656483443999736,
  0.24882980373361502,
  0.24882980373361502,
  0.16150066118959602],
  [0.24214531511452872,
  0.32648480118589202,
  0.32648480118589202,
  0.24882980373361502],
  [0.27502665847100066,
  0.50713271712510477,
  0.50713271712510477,
  0.32648480118589202],
  [0.0, 0.1053260944156567, 0.1053260944156567, 0.0],
  [0.0, 0.074568532564571716, 0.074568532564571716, 0.0],
  [0.0, 0.077448926234758214, 0.077448926234758214, 0.0],
  [0.074568532564571716,
  0.14197222075206761,
  0.14197222075206761,
  0.077448926234758214],
  [0.1053260944156567,
  0.22406324265648883,
  0.22406324265648883,
  0.14197222075206761],
  [0.0, 0.082251365909428803, 0.082251365909428803, 0.0],
  [0.0, 0.090170711077603133, 0.090170711077603133, 0.0],
  [0.082251365909428803,
  0.17736634429976048,
  0.17736634429976048,
  0.090170711077603133],
  [0.0, 0.083094710303071417, 0.083094710303071417, 0.0],
  [0.0, 0.12245240752352791, 0.12245240752352791, 0.0],
  [0.083094710303071417,
  0.18366453295724902,
  0.18366453295724902,
  0.12245240752352791],
  [0.17736634429976048,
  0.42835147446827138,
  0.42835147446827138,
  0.18366453295724902],
  [0.22406324265648883,
  0.82959378275175266,
  0.82959378275175266,
  0.42835147446827138],
  [0.0, 0.1001700111444688, 0.1001700111444688, 0.0],
  [0.0, 0.12425968457783403, 0.12425968457783403, 0.0],
  [0.1001700111444688,
  0.19958197557953913,
  0.19958197557953913,
  0.12425968457783403],
  [0.0, 0.08336976428277755, 0.08336976428277755, 0.0],
  [0.0, 0.11645924472443982, 0.11645924472443982, 0.08336976428277755],
  [0.0, 0.096821380232222504, 0.096821380232222504, 0.0],
  [0.0, 0.093827035947433537, 0.093827035947433537, 0.0],
  [0.0, 0.12227024702200605, 0.12227024702200605, 0.093827035947433537],
  [0.096821380232222504,
  0.16219954708915843,
  0.16219954708915843,
  0.12227024702200605],
  [0.11645924472443982,
  0.25954868599174064,
  0.25954868599174064,
  0.16219954708915843],
  [0.19958197557953913,
  0.4434051617960193,
  0.4434051617960193,
  0.25954868599174064],
  [0.0, 0.11512587674711569, 0.11512587674711569, 0.0],
  [0.0, 0.16705141068141283, 0.16705141068141283, 0.0],
  [0.11512587674711569,
  0.24433337021002374,
  0.24433337021002374,
  0.16705141068141283],
  [0.0, 0.18334640766939159, 0.18334640766939159, 0.0],
  [0.0, 0.15695625779118688, 0.15695625779118688, 0.0],
  [0.0, 0.18744804765202677, 0.18744804765202677, 0.15695625779118688],
  [0.18334640766939159,
  0.28422026290365238,
  0.28422026290365238,
  0.18744804765202677],
  [0.24433337021002374,
  0.48588353820327318,
  0.48588353820327318,
  0.28422026290365238],
  [0.4434051617960193,
  1.1649617691134784,
  1.1649617691134784,
  0.48588353820327318],
  [0.82959378275175266,
  1.4224048316228426,
  1.4224048316228426,
  1.1649617691134784],
  [0.50713271712510477,
  1.8397660500621957,
  1.8397660500621957,
  1.4224048316228426],
  [0.0, 0.07186713061337445, 0.07186713061337445, 0.0],
  [0.0, 0.062973142100737539, 0.062973142100737539, 0.0],
  [0.0, 0.1007142988110187, 0.1007142988110187, 0.062973142100737539],
  [0.07186713061337445,
  0.17846064406288173,
  0.17846064406288173,
  0.1007142988110187],
  [0.0, 0.037217711906007957, 0.037217711906007957, 0.0],
  [0.0, 0.060081433878619597, 0.060081433878619597, 0.0],
  [0.0, 0.072870693447953175, 0.072870693447953175, 0.060081433878619597],
  [0.0, 0.054322310837973987, 0.054322310837973987, 0.0],
  [0.0, 0.032235965087837541, 0.032235965087837541, 0.0],
  [0.0, 0.058367381561843769, 0.058367381561843769, 0.032235965087837541],
  [0.054322310837973987,
  0.12610382479155482,
  0.12610382479155482,
  0.058367381561843769],
  [0.072870693447953175,
  0.18377466527300407,
  0.18377466527300407,
  0.12610382479155482],
  [0.037217711906007957,
  0.29010605714915111,
  0.29010605714915111,
  0.18377466527300407],
  [0.17846064406288173,
  0.53418770353071809,
  0.53418770353071809,
  0.29010605714915111],
  [0.0, 0.017158955429354295, 0.017158955429354295, 0.0],
  [0.0, 0.023082748719362833, 0.023082748719362833, 0.0],
  [0.017158955429354295,
  0.076502514182877207,
  0.076502514182877207,
  0.023082748719362833],
  [0.0, 0.030067284010014409, 0.030067284010014409, 0.0],
  [0.0, 0.05144309298078531, 0.05144309298078531, 0.030067284010014409],
  [0.0, 0.038351607655639101, 0.038351607655639101, 0.0],
  [0.0, 0.052786324769549357, 0.052786324769549357, 0.038351607655639101],
  [0.05144309298078531,
  0.12839839286558241,
  0.12839839286558241,
  0.052786324769549357],
  [0.076502514182877207,
  0.27482323210239262,
  0.27482323210239262,
  0.12839839286558241],
  [0.0, 0.043195773651481487, 0.043195773651481487, 0.0],
  [0.0, 0.079167544823076169, 0.079167544823076169, 0.043195773651481487],
  [0.0, 0.05687680828495955, 0.05687680828495955, 0.0],
  [0.0, 0.031563971177024523, 0.031563971177024523, 0.0],
  [0.0, 0.058713836510500675, 0.058713836510500675, 0.031563971177024523],
  [0.05687680828495955,
  0.13519055569525859,
  0.13519055569525859,
  0.058713836510500675],
  [0.079167544823076169,
  0.29311642524125542,
  0.29311642524125542,
  0.13519055569525859],
  [0.27482323210239262,
  0.77703117976256342,
  0.77703117976256342,
  0.29311642524125542],
  [0.53418770353071809,
  1.3184163916567433,
  1.3184163916567433,
  0.77703117976256342],
  [0.0, 0.11066740395707465, 0.11066740395707465, 0.0],
  [0.0, 0.12088614375466242, 0.12088614375466242, 0.0],
  [0.11066740395707465,
  0.15390586486213717,
  0.15390586486213717,
  0.12088614375466242],
  [0.0, 0.16410697033062049, 0.16410697033062049, 0.0],
  [0.15390586486213717,
  0.24036701363483851,
  0.24036701363483851,
  0.16410697033062049],
  [0.0, 0.094376684675572198, 0.094376684675572198, 0.0],
  [0.0, 0.10385885478211659, 0.10385885478211659, 0.0],
  [0.0, 0.11269374939088468, 0.11269374939088468, 0.0],
  [0.10385885478211659,
  0.14321807856889149,
  0.14321807856889149,
  0.11269374939088468],
  [0.094376684675572198,
  0.28751144108073606,
  0.28751144108073606,
  0.14321807856889149],
  [0.24036701363483851,
  0.4348305325468228,
  0.4348305325468228,
  0.28751144108073606],
  [0.0, 0.034352741641093705, 0.034352741641093705, 0.0],
  [0.0, 0.054603573140022912, 0.054603573140022912, 0.034352741641093705],
  [0.0, 0.034616074383740904, 0.034616074383740904, 0.0],
  [0.0, 0.055483085912313976, 0.055483085912313976, 0.034616074383740904],
  [0.054603573140022912,
  0.16424559654566306,
  0.16424559654566306,
  0.055483085912313976],
  [0.0, 0.023711116402714567, 0.023711116402714567, 0.0],
  [0.0, 0.020788571108053943, 0.020788571108053943, 0.0],
  [0.0, 0.030476185919780942, 0.030476185919780942, 0.0],
  [0.020788571108053943,
  0.064340478151151362,
  0.064340478151151362,
  0.030476185919780942],
  [0.0, 0.018274932598719144, 0.018274932598719144, 0.0],
  [0.0, 0.030701969664651711, 0.030701969664651711, 0.018274932598719144],
  [0.0, 0.034123577245127386, 0.034123577245127386, 0.0],
  [0.0, 0.050942713693290592, 0.050942713693290592, 0.034123577245127386],
  [0.030701969664651711,
  0.10083976064271535,
  0.10083976064271535,
  0.050942713693290592],
  [0.064340478151151362,
  0.18445480812767892,
  0.18445480812767892,
  0.10083976064271535],
  [0.023711116402714567,
  0.26299411731135086,
  0.26299411731135086,
  0.18445480812767892],
  [0.16424559654566306,
  0.5934183230925334,
  0.5934183230925334,
  0.26299411731135086],
  [0.0, 0.030648454165469335, 0.030648454165469335, 0.0],
  [0.0, 0.040582096097082548, 0.040582096097082548, 0.030648454165469335],
  [0.0, 0.037188908351520548, 0.037188908351520548, 0.0],
  [0.0, 0.058840477044761565, 0.058840477044761565, 0.037188908351520548],
  [0.040582096097082548,
  0.16432494460653124,
  0.16432494460653124,
  0.058840477044761565],
  [0.0, 0.028218200480486535, 0.028218200480486535, 0.0],
  [0.0, 0.033797906432607577, 0.033797906432607577, 0.0],
  [0.0, 0.047780288658677249, 0.047780288658677249, 0.033797906432607577],
  [0.028218200480486535,
  0.080123585955783172,
  0.080123585955783172,
  0.047780288658677249],
  [0.0, 0.033407560630085362, 0.033407560630085362, 0.0],
  [0.0, 0.024019709244422777, 0.024019709244422777, 0.0],
  [0.0, 0.027436692212880417, 0.027436692212880417, 0.0],
  [0.0, 0.029820420441144645, 0.029820420441144645, 0.0],
  [0.027436692212880417,
  0.044632998380438459,
  0.044632998380438459,
  0.029820420441144645],
  [0.024019709244422777,
  0.071579160733521247,
  0.071579160733521247,
  0.044632998380438459],
  [0.033407560630085362,
  0.15272646126598943,
  0.15272646126598943,
  0.071579160733521247],
  [0.080123585955783172,
  0.27105835148807939,
  0.27105835148807939,
  0.15272646126598943],
  [0.16432494460653124,
  0.65704369727108669,
  0.65704369727108669,
  0.27105835148807939],
  [0.5934183230925334,
  1.4974022392554263,
  1.4974022392554263,
  0.65704369727108669],
  [0.4348305325468228,
  1.6568865704403262,
  1.6568865704403262,
  1.4974022392554263],
  [1.3184163916567433,
  2.8266535542499946,
  2.8266535542499946,
  1.6568865704403262],
  [1.8397660500621957,
  3.3243970328012411,
  3.3243970328012411,
  2.8266535542499946],
  [3.2493031862907253,
  4.2396751824268835,
  4.2396751824268835,
  3.3243970328012411],
  [0.0, 0.023901542136925247, 0.023901542136925247, 0.0],
  [0.0, 0.024990032010186035, 0.024990032010186035, 0.0],
  [0.023901542136925247,
  0.060915645551123977,
  0.060915645551123977,
  0.024990032010186035],
  [0.0, 0.032026297584880507, 0.032026297584880507, 0.0],
  [0.0, 0.032778436478788968, 0.032778436478788968, 0.0],
  [0.032026297584880507,
  0.093031034110892252,
  0.093031034110892252,
  0.032778436478788968],
  [0.060915645551123977,
  0.25093590739944577,
  0.25093590739944577,
  0.093031034110892252],
  [0.0, 0.017797502446242591, 0.017797502446242591, 0.0],
  [0.0, 0.016435843660587899, 0.016435843660587899, 0.0],
  [0.0, 0.021290255419310074, 0.021290255419310074, 0.0],
  [0.016435843660587899,
  0.060909768325774112,
  0.060909768325774112,
  0.021290255419310074],
  [0.017797502446242591,
  0.11520859693167836,
  0.11520859693167836,
  0.060909768325774112],
  [0.0, 0.022138344840148674, 0.022138344840148674, 0.0],
  [0.0, 0.016699209966781394, 0.016699209966781394, 0.0],
  [0.0, 0.018956705541978217, 0.018956705541978217, 0.0],
  [0.016699209966781394,
  0.049125206953691949,
  0.049125206953691949,
  0.018956705541978217],
  [0.022138344840148674,
  0.15195044561932611,
  0.15195044561932611,
  0.049125206953691949],
  [0.11520859693167836,
  0.31251421441890687,
  0.31251421441890687,
  0.15195044561932611],
  [0.25093590739944577,
  0.76265256345210564,
  0.76265256345210564,
  0.31251421441890687],
  [0.0, 0.1145105678373831, 0.1145105678373831, 0.0],
  [0.0, 0.11897485259844211, 0.11897485259844211, 0.1145105678373831],
  [0.0, 0.12476341922947219, 0.12476341922947219, 0.0],
  [0.0, 0.12786915960387099, 0.12786915960387099, 0.0],
  [0.12476341922947219,
  0.18221779044819017,
  0.18221779044819017,
  0.12786915960387099],
  [0.11897485259844211,
  0.24773621226125359,
  0.24773621226125359,
  0.18221779044819017],
  [0.0, 0.11725175099991685, 0.11725175099991685, 0.0],
  [0.0, 0.12406714480518885, 0.12406714480518885, 0.11725175099991685],
  [0.0, 0.12459856695318278, 0.12459856695318278, 0.0],
  [0.0, 0.14301242936091091, 0.14301242936091091, 0.12459856695318278],
  [0.12406714480518885,
  0.26021238902999794,
  0.26021238902999794,
  0.14301242936091091],
  [0.24773621226125359,
  0.53028061645537772,
  0.53028061645537772,
  0.26021238902999794],
  [0.0, 0.070234801769054167, 0.070234801769054167, 0.0],
  [0.0, 0.077855719457755962, 0.077855719457755962, 0.0],
  [0.070234801769054167,
  0.14727734606984175,
  0.14727734606984175,
  0.077855719457755962],
  [0.0, 0.092737606872981826, 0.092737606872981826, 0.0],
  [0.0, 0.077282464294910272, 0.077282464294910272, 0.0],
  [0.0, 0.096325519029729731, 0.096325519029729731, 0.0],
  [0.077282464294910272,
  0.12921650588385539,
  0.12921650588385539,
  0.096325519029729731],
  [0.092737606872981826,
  0.19089468708314764,
  0.19089468708314764,
  0.12921650588385539],
  [0.14727734606984175,
  0.3337353377785347,
  0.3337353377785347,
  0.19089468708314764],
  [0.0, 0.099762668960397885, 0.099762668960397885, 0.0],
  [0.0, 0.11595914505233225, 0.11595914505233225, 0.0],
  [0.099762668960397885,
  0.17816681376249791,
  0.17816681376249791,
  0.11595914505233225],
  [0.0, 0.10936814511502775, 0.10936814511502775, 0.0],
  [0.0, 0.1120836712876411, 0.1120836712876411, 0.0],
  [0.10936814511502775,
  0.19800355231802458,
  0.19800355231802458,
  0.1120836712876411],
  [0.17816681376249791,
  0.36804922276256846,
  0.36804922276256846,
  0.19800355231802458],
  [0.3337353377785347,
  0.80786494862082225,
  0.80786494862082225,
  0.36804922276256846],
  [0.53028061645537772,
  1.6105864738800537,
  1.6105864738800537,
  0.80786494862082225],
  [0.76265256345210564,
  2.0243936333808996,
  2.0243936333808996,
  1.6105864738800537],
  [0.0, 0.041342466023489774, 0.041342466023489774, 0.0],
  [0.0, 0.059350507574829049, 0.059350507574829049, 0.041342466023489774],
  [0.0, 0.037203157213876764, 0.037203157213876764, 0.0],
  [0.0, 0.046384436139005253, 0.046384436139005253, 0.0],
  [0.037203157213876764,
  0.076728528780858729,
  0.076728528780858729,
  0.046384436139005253],
  [0.059350507574829049,
  0.15204177422606671,
  0.15204177422606671,
  0.076728528780858729],
  [0.0, 0.084038632718211145, 0.084038632718211145, 0.0],
  [0.0, 0.11585499310375673, 0.11585499310375673, 0.0],
  [0.084038632718211145,
  0.21158141007094675,
  0.21158141007094675,
  0.11585499310375673],
  [0.15204177422606671,
  0.50512906315167727,
  0.50512906315167727,
  0.21158141007094675],
  [0.0, 0.02988808197990768, 0.02988808197990768, 0.0],
  [0.0, 0.016874146561105901, 0.016874146561105901, 0.0],
  [0.0, 0.01397393833203037, 0.01397393833203037, 0.0],
  [0.0, 0.014584984327238062, 0.014584984327238062, 0.0],
  [0.01397393833203037,
  0.052632977533614671,
  0.052632977533614671,
  0.014584984327238062],
  [0.016874146561105901,
  0.13158583739787583,
  0.13158583739787583,
  0.052632977533614671],
  [0.02988808197990768,
  0.20072155709597503,
  0.20072155709597503,
  0.13158583739787583],
  [0.0, 0.046836983018019605, 0.046836983018019605, 0.0],
  [0.0, 0.035650454918178739, 0.035650454918178739, 0.0],
  [0.0, 0.039721933353438911, 0.039721933353438911, 0.0],
  [0.035650454918178739,
  0.077561121366580707,
  0.077561121366580707,
  0.039721933353438911],
  [0.046836983018019605,
  0.14347687987992019,
  0.14347687987992019,
  0.077561121366580707],
  [0.0, 0.057174650055992343, 0.057174650055992343, 0.0],
  [0.0, 0.070921054006966411, 0.070921054006966411, 0.0],
  [0.057174650055992343,
  0.17943996869875989,
  0.17943996869875989,
  0.070921054006966411],
  [0.14347687987992019,
  0.40970552879721739,
  0.40970552879721739,
  0.17943996869875989],
  [0.20072155709597503,
  0.63806199674658337,
  0.63806199674658337,
  0.40970552879721739],
  [0.50512906315167727,
  1.036692447089119,
  1.036692447089119,
  0.63806199674658337],
  [0.0, 0.041057839757232387, 0.041057839757232387, 0.0],
  [0.0, 0.045075456065261379, 0.045075456065261379, 0.0],
  [0.041057839757232387,
  0.059494149968979469,
  0.059494149968979469,
  0.045075456065261379],
  [0.0, 0.042784862710283804, 0.042784862710283804, 0.0],
  [0.0, 0.052101942100594538, 0.052101942100594538, 0.042784862710283804],
  [0.0, 0.078331021879453969, 0.078331021879453969, 0.052101942100594538],
  [0.059494149968979469,
  0.12588800804855921,
  0.12588800804855921,
  0.078331021879453969],
  [0.0, 0.053091708882385069, 0.053091708882385069, 0.0],
  [0.0, 0.060749729046542682, 0.060749729046542682, 0.053091708882385069],
  [0.0, 0.048359285399707526, 0.048359285399707526, 0.0],
  [0.0, 0.04911383023294625, 0.04911383023294625, 0.0],
  [0.048359285399707526,
  0.085406649379136695,
  0.085406649379136695,
  0.04911383023294625],
  [0.060749729046542682,
  0.16953929300058507,
  0.16953929300058507,
  0.085406649379136695],
  [0.12588800804855921,
  0.34854344899537321,
  0.34854344899537321,
  0.16953929300058507],
  [0.0, 0.095770353907478012, 0.095770353907478012, 0.0],
  [0.0, 0.10905920445084553, 0.10905920445084553, 0.0],
  [0.095770353907478012,
  0.16326035186412413,
  0.16326035186412413,
  0.10905920445084553],
  [0.0, 0.064058353170016832, 0.064058353170016832, 0.0],
  [0.0, 0.076526535418595026, 0.076526535418595026, 0.0],
  [0.0, 0.099309786365252894, 0.099309786365252894, 0.076526535418595026],
  [0.064058353170016832,
  0.1966131063042241,
  0.1966131063042241,
  0.099309786365252894],
  [0.16326035186412413,
  0.37060526780434366,
  0.37060526780434366,
  0.1966131063042241],
  [0.34854344899537321,
  0.70371319158635526,
  0.70371319158635526,
  0.37060526780434366],
  [0.0, 0.023972233121859653, 0.023972233121859653, 0.0],
  [0.0, 0.048912640222379733, 0.048912640222379733, 0.023972233121859653],
  [0.0, 0.026454309469715265, 0.026454309469715265, 0.0],
  [0.0, 0.05230733386131399, 0.05230733386131399, 0.026454309469715265],
  [0.048912640222379733,
  0.18785262414933582,
  0.18785262414933582,
  0.05230733386131399],
  [0.0, 0.0175608260217603, 0.0175608260217603, 0.0],
  [0.0, 0.01869847724204159, 0.01869847724204159, 0.0],
  [0.0175608260217603,
  0.065066064730872397,
  0.065066064730872397,
  0.01869847724204159],
  [0.0, 0.010334215551854476, 0.010334215551854476, 0.0],
  [0.0, 0.011561828992052891, 0.011561828992052891, 0.0],
  [0.0, 0.01790398666649964, 0.01790398666649964, 0.011561828992052891],
  [0.010334215551854476,
  0.037780428557458841,
  0.037780428557458841,
  0.01790398666649964],
  [0.0, 0.014306987702480985, 0.014306987702480985, 0.0],
  [0.0, 0.012372441134541558, 0.012372441134541558, 0.0],
  [0.0, 0.022086611292634714, 0.022086611292634714, 0.012372441134541558],
  [0.014306987702480985,
  0.060276302089934085,
  0.060276302089934085,
  0.022086611292634714],
  [0.037780428557458841,
  0.16339094679815094,
  0.16339094679815094,
  0.060276302089934085],
  [0.065066064730872397,
  0.37093950856686803,
  0.37093950856686803,
  0.16339094679815094],
  [0.18785262414933582,
  0.46522326801042196,
  0.46522326801042196,
  0.37093950856686803],
  [0.0, 0.088556132558019029, 0.088556132558019029, 0.0],
  [0.0, 0.058116505516690946, 0.058116505516690946, 0.0],
  [0.0, 0.084176533945446774, 0.084176533945446774, 0.0],
  [0.058116505516690946,
  0.13433035361677315,
  0.13433035361677315,
  0.084176533945446774],
  [0.088556132558019029,
  0.25557147511781458,
  0.25557147511781458,
  0.13433035361677315],
  [0.0, 0.04654832661162956, 0.04654832661162956, 0.0],
  [0.0, 0.047099878386539867, 0.047099878386539867, 0.0],
  [0.04654832661162956,
  0.10308586348583401,
  0.10308586348583401,
  0.047099878386539867],
  [0.0, 0.038114773235563178, 0.038114773235563178, 0.0],
  [0.0, 0.037919874249310613, 0.037919874249310613, 0.0],
  [0.0, 0.039667494992010721, 0.039667494992010721, 0.0],
  [0.037919874249310613,
  0.065918346328074931,
  0.065918346328074931,
  0.039667494992010721],
  [0.038114773235563178,
  0.094568840904821622,
  0.094568840904821622,
  0.065918346328074931],
  [0.0, 0.05098756730732229, 0.05098756730732229, 0.0],
  [0.0, 0.052475567584877154, 0.052475567584877154, 0.0],
  [0.05098756730732229,
  0.10289906511593787,
  0.10289906511593787,
  0.052475567584877154],
  [0.094568840904821622,
  0.23074835832583682,
  0.23074835832583682,
  0.10289906511593787],
  [0.10308586348583401,
  0.37442158657309582,
  0.37442158657309582,
  0.23074835832583682],
  [0.25557147511781458,
  0.51078306405881624,
  0.51078306405881624,
  0.37442158657309582],
  [0.46522326801042196,
  1.2439039827969003,
  1.2439039827969003,
  0.51078306405881624],
  [0.70371319158635526,
  1.8991453438464352,
  1.8991453438464352,
  1.2439039827969003],
  [1.036692447089119,
  2.2234895913711386,
  2.2234895913711386,
  1.8991453438464352],
  [2.0243936333808996,
  3.199054583964231,
  3.199054583964231,
  2.2234895913711386],
  [0.0, 0.045538218322915595, 0.045538218322915595, 0.0],
  [0.0, 0.052453717201960348, 0.052453717201960348, 0.0],
  [0.045538218322915595,
  0.10567749440384801,
  0.10567749440384801,
  0.052453717201960348],
  [0.0, 0.030275337712369149, 0.030275337712369149, 0.0],
  [0.0, 0.037755563113503206, 0.037755563113503206, 0.0],
  [0.030275337712369149,
  0.065188618914505336,
  0.065188618914505336,
  0.037755563113503206],
  [0.0, 0.027850452423308275, 0.027850452423308275, 0.0],
  [0.0, 0.030767060803336008, 0.030767060803336008, 0.0],
  [0.027850452423308275,
  0.053974801308936261,
  0.053974801308936261,
  0.030767060803336008],
  [0.0, 0.088229651861295597, 0.088229651861295597, 0.053974801308936261],
  [0.065188618914505336,
  0.16960995154971817,
  0.16960995154971817,
  0.088229651861295597],
  [0.10567749440384801,
  0.35570517684329611,
  0.35570517684329611,
  0.16960995154971817],
  [0.0, 0.062056889100051839, 0.062056889100051839, 0.0],
  [0.0, 0.081216834948688241, 0.081216834948688241, 0.0],
  [0.062056889100051839,
  0.20425322417353672,
  0.20425322417353672,
  0.081216834948688241],
  [0.0, 0.058908223271972739, 0.058908223271972739, 0.0],
  [0.0, 0.075226364049122502, 0.075226364049122502, 0.0],
  [0.0, 0.10898482754402031, 0.10898482754402031, 0.075226364049122502],
  [0.058908223271972739,
  0.25970386947084756,
  0.25970386947084756,
  0.10898482754402031],
  [0.20425322417353672,
  0.72601779790242549,
  0.72601779790242549,
  0.25970386947084756],
  [0.35570517684329611,
  0.87846212003776392,
  0.87846212003776392,
  0.72601779790242549],
  [0.0, 0.062263818065386459, 0.062263818065386459, 0.0],
  [0.0, 0.045009607267502222, 0.045009607267502222, 0.0],
  [0.0, 0.065156122617475179, 0.065156122617475179, 0.045009607267502222],
  [0.0, 0.12269548980199967, 0.12269548980199967, 0.065156122617475179],
  [0.062263818065386459,
  0.19156368611840852,
  0.19156368611840852,
  0.12269548980199967],
  [0.0, 0.056041629231539637, 0.056041629231539637, 0.0],
  [0.0, 0.067588643755182462, 0.067588643755182462, 0.0],
  [0.056041629231539637,
  0.11446629087697141,
  0.11446629087697141,
  0.067588643755182462],
  [0.0, 0.067556387741198903, 0.067556387741198903, 0.0],
  [0.0, 0.084763489392696456, 0.084763489392696456, 0.067556387741198903],
  [0.0, 0.07893554392913682, 0.07893554392913682, 0.0],
  [0.0, 0.085445238780979912, 0.085445238780979912, 0.07893554392913682],
  [0.084763489392696456,
  0.15956670633349659,
  0.15956670633349659,
  0.085445238780979912],
  [0.11446629087697141,
  0.2498676383177727,
  0.2498676383177727,
  0.15956670633349659],
  [0.0, 0.078813228319033854, 0.078813228319033854, 0.0],
  [0.0, 0.080993880197763657, 0.080993880197763657, 0.0],
  [0.0, 0.094989561427632957, 0.094989561427632957, 0.080993880197763657],
  [0.078813228319033854,
  0.16663713692611135,
  0.16663713692611135,
  0.094989561427632957],
  [0.0, 0.12450106880975699, 0.12450106880975699, 0.0],
  [0.0, 0.098039025985510467, 0.098039025985510467, 0.0],
  [0.0, 0.13070067389996698, 0.13070067389996698, 0.098039025985510467],
  [0.12450106880975699,
  0.22898761894168604,
  0.22898761894168604,
  0.13070067389996698],
  [0.16663713692611135,
  0.39672669658716447,
  0.39672669658716447,
  0.22898761894168604],
  [0.2498676383177727,
  0.77333007885689775,
  0.77333007885689775,
  0.39672669658716447],
  [0.19156368611840852,
  1.1325398937840194,
  1.1325398937840194,
  0.77333007885689775],
  [0.87846212003776392,
  2.4028753018762714,
  2.4028753018762714,
  1.1325398937840194],
  [0.0, 0.04276810137782483, 0.04276810137782483, 0.0],
  [0.0, 0.054233129566249996, 0.054233129566249996, 0.0],
  [0.04276810137782483,
  0.12452428844702065,
  0.12452428844702065,
  0.054233129566249996],
  [0.0, 0.048708401415385051, 0.048708401415385051, 0.0],
  [0.0, 0.050960455557951964, 0.050960455557951964, 0.0],
  [0.048708401415385051,
  0.097682922397247268,
  0.097682922397247268,
  0.050960455557951964],
  [0.0, 0.051918598950003149, 0.051918598950003149, 0.0],
  [0.0, 0.039154710547634364, 0.039154710547634364, 0.0],
  [0.0, 0.039900098258785321, 0.039900098258785321, 0.0],
  [0.039154710547634364,
  0.07373257482593816,
  0.07373257482593816,
  0.039900098258785321],
  [0.051918598950003149,
  0.13281633517010705,
  0.13281633517010705,
  0.07373257482593816],
  [0.097682922397247268,
  0.28048519697647589,
  0.28048519697647589,
  0.13281633517010705],
  [0.12452428844702065,
  0.54761835118192081,
  0.54761835118192081,
  0.28048519697647589],
  [0.0, 0.081008992822088025, 0.081008992822088025, 0.0],
  [0.0, 0.091085738499442806, 0.091085738499442806, 0.0],
  [0.0, 0.09899792511890898, 0.09899792511890898, 0.091085738499442806],
  [0.081008992822088025,
  0.15594552175423915,
  0.15594552175423915,
  0.09899792511890898],
  [0.0, 0.062438140295585511, 0.062438140295585511, 0.0],
  [0.0, 0.066755358900376885, 0.066755358900376885, 0.0],
  [0.0, 0.091055006742788464, 0.091055006742788464, 0.0],
  [0.066755358900376885,
  0.1557626538268527,
  0.1557626538268527,
  0.091055006742788464],
  [0.062438140295585511,
  0.26681050317947119,
  0.26681050317947119,
  0.1557626538268527],
  [0.15594552175423915,
  0.55962544494389177,
  0.55962544494389177,
  0.26681050317947119],
  [0.54761835118192081,
  1.027704903951123,
  1.027704903951123,
  0.55962544494389177],
  [0.0, 0.038664156368874367, 0.038664156368874367, 0.0],
  [0.0, 0.044560239275075512, 0.044560239275075512, 0.0],
  [0.038664156368874367,
  0.10398776941858764,
  0.10398776941858764,
  0.044560239275075512],
  [0.0, 0.06428601863907929, 0.06428601863907929, 0.0],
  [0.0, 0.035966107582125095, 0.035966107582125095, 0.0],
  [0.0, 0.038901797720139589, 0.038901797720139589, 0.0],
  [0.035966107582125095,
  0.072293416782985356,
  0.072293416782985356,
  0.038901797720139589],
  [0.06428601863907929,
  0.14464114470314987,
  0.14464114470314987,
  0.072293416782985356],
  [0.10398776941858764,
  0.31590121990632708,
  0.31590121990632708,
  0.14464114470314987],
  [0.0, 0.05887473715474098, 0.05887473715474098, 0.0],
  [0.0, 0.045757794148036837, 0.045757794148036837, 0.0],
  [0.0, 0.069796819065644264, 0.069796819065644264, 0.0],
  [0.045757794148036837,
  0.099191422085636013,
  0.099191422085636013,
  0.069796819065644264],
  [0.05887473715474098,
  0.15079032647495702,
  0.15079032647495702,
  0.099191422085636013],
  [0.0, 0.090429200730339068, 0.090429200730339068, 0.0],
  [0.0, 0.10598305655589721, 0.10598305655589721, 0.090429200730339068],
  [0.0, 0.066107271363220796, 0.066107271363220796, 0.0],
  [0.0, 0.076733681692940231, 0.076733681692940231, 0.0],
  [0.066107271363220796,
  0.11034642588077234,
  0.11034642588077234,
  0.076733681692940231],
  [0.10598305655589721,
  0.23194011938762016,
  0.23194011938762016,
  0.11034642588077234],
  [0.15079032647495702,
  0.37061854822676915,
  0.37061854822676915,
  0.23194011938762016],
  [0.31590121990632708,
  1.1326870061752741,
  1.1326870061752741,
  0.37061854822676915],
  [1.027704903951123,
  2.0205391777728199,
  2.0205391777728199,
  1.1326870061752741],
  [0.0, 0.049279700109493306, 0.049279700109493306, 0.0],
  [0.0, 0.042728015578455819, 0.042728015578455819, 0.0],
  [0.0, 0.060877015824391971, 0.060877015824391971, 0.0],
  [0.042728015578455819,
  0.14560385205862217,
  0.14560385205862217,
  0.060877015824391971],
  [0.049279700109493306,
  0.22784969873685806,
  0.22784969873685806,
  0.14560385205862217],
  [0.0, 0.03337782879788407, 0.03337782879788407, 0.0],
  [0.0, 0.033827358366610591, 0.033827358366610591, 0.0],
  [0.03337782879788407,
  0.095026893193805501,
  0.095026893193805501,
  0.033827358366610591],
  [0.0, 0.029410604179535289, 0.029410604179535289, 0.0],
  [0.0, 0.02951532999366676, 0.02951532999366676, 0.0],
  [0.029410604179535289,
  0.064206203391257474,
  0.064206203391257474,
  0.02951532999366676],
  [0.0, 0.043253843745694062, 0.043253843745694062, 0.0],
  [0.0, 0.022575487388865306, 0.022575487388865306, 0.0],
  [0.0, 0.023004284472837495, 0.023004284472837495, 0.0],
  [0.022575487388865306,
  0.049566471566139331,
  0.049566471566139331,
  0.023004284472837495],
  [0.043253843745694062,
  0.12669156314712046,
  0.12669156314712046,
  0.049566471566139331],
  [0.064206203391257474,
  0.1837167159986883,
  0.1837167159986883,
  0.12669156314712046],
  [0.095026893193805501,
  0.38361153177130153,
  0.38361153177130153,
  0.1837167159986883],
  [0.22784969873685806,
  0.67393400733873143,
  0.67393400733873143,
  0.38361153177130153],
  [0.0, 0.035110018052742324, 0.035110018052742324, 0.0],
  [0.0, 0.044382181923627008, 0.044382181923627008, 0.0],
  [0.035110018052742324,
  0.14330123252744034,
  0.14330123252744034,
  0.044382181923627008],
  [0.0, 0.060107440955998549, 0.060107440955998549, 0.0],
  [0.0, 0.031246245510238749, 0.031246245510238749, 0.0],
  [0.0, 0.03418096599112222, 0.03418096599112222, 0.0],
  [0.031246245510238749,
  0.08787894326424156,
  0.08787894326424156,
  0.03418096599112222],
  [0.060107440955998549,
  0.16086392895484908,
  0.16086392895484908,
  0.08787894326424156],
  [0.14330123252744034,
  0.48961479305490629,
  0.48961479305490629,
  0.16086392895484908],
  [0.0, 0.040347112798003563, 0.040347112798003563, 0.0],
  [0.0, 0.052132134501403513, 0.052132134501403513, 0.0],
  [0.040347112798003563,
  0.10242024736393561,
  0.10242024736393561,
  0.052132134501403513],
  [0.0, 0.045887955669626765, 0.045887955669626765, 0.0],
  [0.0, 0.031482981409837935, 0.031482981409837935, 0.0],
  [0.0, 0.05208655652495478, 0.05208655652495478, 0.0],
  [0.031482981409837935,
  0.075008861926567458,
  0.075008861926567458,
  0.05208655652495478],
  [0.045887955669626765,
  0.14730409051531965,
  0.14730409051531965,
  0.075008861926567458],
  [0.10242024736393561,
  0.21668122118194003,
  0.21668122118194003,
  0.14730409051531965],
  [0.0, 0.053009919510774967, 0.053009919510774967, 0.0],
  [0.0, 0.059546529610434835, 0.059546529610434835, 0.0],
  [0.053009919510774967,
  0.10113017393478235,
  0.10113017393478235,
  0.059546529610434835],
  [0.0, 0.062697465270528149, 0.062697465270528149, 0.0],
  [0.0, 0.072874833437903394, 0.072874833437903394, 0.0],
  [0.062697465270528149,
  0.12994429928315779,
  0.12994429928315779,
  0.072874833437903394],
  [0.10113017393478235,
  0.25270199522126729,
  0.25270199522126729,
  0.12994429928315779],
  [0.21668122118194003,
  0.56597352256325728,
  0.56597352256325728,
  0.25270199522126729],
  [0.48961479305490629,
  1.1877977250165996,
  1.1877977250165996,
  0.56597352256325728],
  [0.67393400733873143,
  2.0309236741043493,
  2.0309236741043493,
  1.1877977250165996],
  [2.0205391777728199,
  2.900469789241455,
  2.900469789241455,
  2.0309236741043493],
  [2.4028753018762714,
  4.5098877124661207,
  4.5098877124661207,
  2.900469789241455],
  [3.199054583964231,
  5.7263802353448643,
  5.7263802353448643,
  4.5098877124661207],
  [4.2396751824268835,
  6.8974955343881721,
  6.8974955343881721,
  5.7263802353448643]],
  'icoord': [[15.0, 15.0, 25.0, 25.0],
  [5.0, 5.0, 20.0, 20.0],
  [35.0, 35.0, 45.0, 45.0],
  [55.0, 55.0, 65.0, 65.0],
  [40.0, 40.0, 60.0, 60.0],
  [12.5, 12.5, 50.0, 50.0],
  [75.0, 75.0, 85.0, 85.0],
  [95.0, 95.0, 105.0, 105.0],
  [80.0, 80.0, 100.0, 100.0],
  [115.0, 115.0, 125.0, 125.0],
  [135.0, 135.0, 145.0, 145.0],
  [155.0, 155.0, 165.0, 165.0],
  [140.0, 140.0, 160.0, 160.0],
  [120.0, 120.0, 150.0, 150.0],
  [90.0, 90.0, 135.0, 135.0],
  [175.0, 175.0, 185.0, 185.0],
  [195.0, 195.0, 205.0, 205.0],
  [215.0, 215.0, 225.0, 225.0],
  [200.0, 200.0, 220.0, 220.0],
  [180.0, 180.0, 210.0, 210.0],
  [112.5, 112.5, 195.0, 195.0],
  [31.25, 31.25, 153.75, 153.75],
  [245.0, 245.0, 255.0, 255.0],
  [235.0, 235.0, 250.0, 250.0],
  [265.0, 265.0, 275.0, 275.0],
  [285.0, 285.0, 295.0, 295.0],
  [270.0, 270.0, 290.0, 290.0],
  [242.5, 242.5, 280.0, 280.0],
  [305.0, 305.0, 315.0, 315.0],
  [325.0, 325.0, 335.0, 335.0],
  [310.0, 310.0, 330.0, 330.0],
  [345.0, 345.0, 355.0, 355.0],
  [365.0, 365.0, 375.0, 375.0],
  [350.0, 350.0, 370.0, 370.0],
  [385.0, 385.0, 395.0, 395.0],
  [405.0, 405.0, 415.0, 415.0],
  [390.0, 390.0, 410.0, 410.0],
  [425.0, 425.0, 435.0, 435.0],
  [445.0, 445.0, 455.0, 455.0],
  [465.0, 465.0, 475.0, 475.0],
  [450.0, 450.0, 470.0, 470.0],
  [430.0, 430.0, 460.0, 460.0],
  [400.0, 400.0, 445.0, 445.0],
  [360.0, 360.0, 422.5, 422.5],
  [320.0, 320.0, 391.25, 391.25],
  [261.25, 261.25, 355.625, 355.625],
  [92.5, 92.5, 308.4375, 308.4375],
  [485.0, 485.0, 495.0, 495.0],
  [505.0, 505.0, 515.0, 515.0],
  [535.0, 535.0, 545.0, 545.0],
  [525.0, 525.0, 540.0, 540.0],
  [510.0, 510.0, 532.5, 532.5],
  [490.0, 490.0, 521.25, 521.25],
  [565.0, 565.0, 575.0, 575.0],
  [555.0, 555.0, 570.0, 570.0],
  [595.0, 595.0, 605.0, 605.0],
  [585.0, 585.0, 600.0, 600.0],
  [615.0, 615.0, 625.0, 625.0],
  [592.5, 592.5, 620.0, 620.0],
  [562.5, 562.5, 606.25, 606.25],
  [505.625, 505.625, 584.375, 584.375],
  [635.0, 635.0, 645.0, 645.0],
  [655.0, 655.0, 665.0, 665.0],
  [640.0, 640.0, 660.0, 660.0],
  [675.0, 675.0, 685.0, 685.0],
  [695.0, 695.0, 705.0, 705.0],
  [715.0, 715.0, 725.0, 725.0],
  [700.0, 700.0, 720.0, 720.0],
  [680.0, 680.0, 710.0, 710.0],
  [650.0, 650.0, 695.0, 695.0],
  [735.0, 735.0, 745.0, 745.0],
  [755.0, 755.0, 765.0, 765.0],
  [775.0, 775.0, 785.0, 785.0],
  [795.0, 795.0, 805.0, 805.0],
  [780.0, 780.0, 800.0, 800.0],
  [760.0, 760.0, 790.0, 790.0],
  [740.0, 740.0, 775.0, 775.0],
  [815.0, 815.0, 825.0, 825.0],
  [835.0, 835.0, 845.0, 845.0],
  [820.0, 820.0, 840.0, 840.0],
  [885.0, 885.0, 895.0, 895.0],
  [875.0, 875.0, 890.0, 890.0],
  [865.0, 865.0, 882.5, 882.5],
  [855.0, 855.0, 873.75, 873.75],
  [830.0, 830.0, 864.375, 864.375],
  [757.5, 757.5, 847.1875, 847.1875],
  [672.5, 672.5, 802.34375, 802.34375],
  [545.0, 545.0, 737.421875, 737.421875],
  [915.0, 915.0, 925.0, 925.0],
  [905.0, 905.0, 920.0, 920.0],
  [935.0, 935.0, 945.0, 945.0],
  [955.0, 955.0, 965.0, 965.0],
  [940.0, 940.0, 960.0, 960.0],
  [912.5, 912.5, 950.0, 950.0],
  [985.0, 985.0, 995.0, 995.0],
  [975.0, 975.0, 990.0, 990.0],
  [1005.0, 1005.0, 1015.0, 1015.0],
  [1025.0, 1025.0, 1035.0, 1035.0],
  [1010.0, 1010.0, 1030.0, 1030.0],
  [982.5, 982.5, 1020.0, 1020.0],
  [931.25, 931.25, 1001.25, 1001.25],
  [1055.0, 1055.0, 1065.0, 1065.0],
  [1045.0, 1045.0, 1060.0, 1060.0],
  [1085.0, 1085.0, 1095.0, 1095.0],
  [1075.0, 1075.0, 1090.0, 1090.0],
  [1052.5, 1052.5, 1082.5, 1082.5],
  [1115.0, 1115.0, 1125.0, 1125.0],
  [1105.0, 1105.0, 1120.0, 1120.0],
  [1135.0, 1135.0, 1145.0, 1145.0],
  [1155.0, 1155.0, 1165.0, 1165.0],
  [1140.0, 1140.0, 1160.0, 1160.0],
  [1112.5, 1112.5, 1150.0, 1150.0],
  [1067.5, 1067.5, 1131.25, 1131.25],
  [966.25, 966.25, 1099.375, 1099.375],
  [1185.0, 1185.0, 1195.0, 1195.0],
  [1175.0, 1175.0, 1190.0, 1190.0],
  [1205.0, 1205.0, 1215.0, 1215.0],
  [1225.0, 1225.0, 1235.0, 1235.0],
  [1210.0, 1210.0, 1230.0, 1230.0],
  [1182.5, 1182.5, 1220.0, 1220.0],
  [1255.0, 1255.0, 1265.0, 1265.0],
  [1245.0, 1245.0, 1260.0, 1260.0],
  [1275.0, 1275.0, 1285.0, 1285.0],
  [1295.0, 1295.0, 1305.0, 1305.0],
  [1280.0, 1280.0, 1300.0, 1300.0],
  [1252.5, 1252.5, 1290.0, 1290.0],
  [1325.0, 1325.0, 1335.0, 1335.0],
  [1315.0, 1315.0, 1330.0, 1330.0],
  [1345.0, 1345.0, 1355.0, 1355.0],
  [1365.0, 1365.0, 1375.0, 1375.0],
  [1350.0, 1350.0, 1370.0, 1370.0],
  [1322.5, 1322.5, 1360.0, 1360.0],
  [1271.25, 1271.25, 1341.25, 1341.25],
  [1201.25, 1201.25, 1306.25, 1306.25],
  [1385.0, 1385.0, 1395.0, 1395.0],
  [1405.0, 1405.0, 1415.0, 1415.0],
  [1390.0, 1390.0, 1410.0, 1410.0],
  [1425.0, 1425.0, 1435.0, 1435.0],
  [1445.0, 1445.0, 1455.0, 1455.0],
  [1430.0, 1430.0, 1450.0, 1450.0],
  [1400.0, 1400.0, 1440.0, 1440.0],
  [1465.0, 1465.0, 1475.0, 1475.0],
  [1485.0, 1485.0, 1495.0, 1495.0],
  [1470.0, 1470.0, 1490.0, 1490.0],
  [1505.0, 1505.0, 1515.0, 1515.0],
  [1525.0, 1525.0, 1535.0, 1535.0],
  [1510.0, 1510.0, 1530.0, 1530.0],
  [1545.0, 1545.0, 1555.0, 1555.0],
  [1565.0, 1565.0, 1575.0, 1575.0],
  [1550.0, 1550.0, 1570.0, 1570.0],
  [1520.0, 1520.0, 1560.0, 1560.0],
  [1480.0, 1480.0, 1540.0, 1540.0],
  [1420.0, 1420.0, 1510.0, 1510.0],
  [1253.75, 1253.75, 1465.0, 1465.0],
  [1032.8125, 1032.8125, 1359.375, 1359.375],
  [641.2109375, 641.2109375, 1196.09375, 1196.09375],
  [200.46875, 200.46875, 918.65234375, 918.65234375],
  [1585.0, 1585.0, 1595.0, 1595.0],
  [1605.0, 1605.0, 1615.0, 1615.0],
  [1625.0, 1625.0, 1635.0, 1635.0],
  [1610.0, 1610.0, 1630.0, 1630.0],
  [1590.0, 1590.0, 1620.0, 1620.0],
  [1655.0, 1655.0, 1665.0, 1665.0],
  [1645.0, 1645.0, 1660.0, 1660.0],
  [1675.0, 1675.0, 1685.0, 1685.0],
  [1695.0, 1695.0, 1705.0, 1705.0],
  [1680.0, 1680.0, 1700.0, 1700.0],
  [1652.5, 1652.5, 1690.0, 1690.0],
  [1605.0, 1605.0, 1671.25, 1671.25],
  [1715.0, 1715.0, 1725.0, 1725.0],
  [1735.0, 1735.0, 1745.0, 1745.0],
  [1755.0, 1755.0, 1765.0, 1765.0],
  [1740.0, 1740.0, 1760.0, 1760.0],
  [1720.0, 1720.0, 1750.0, 1750.0],
  [1775.0, 1775.0, 1785.0, 1785.0],
  [1795.0, 1795.0, 1805.0, 1805.0],
  [1780.0, 1780.0, 1800.0, 1800.0],
  [1815.0, 1815.0, 1825.0, 1825.0],
  [1835.0, 1835.0, 1845.0, 1845.0],
  [1820.0, 1820.0, 1840.0, 1840.0],
  [1790.0, 1790.0, 1830.0, 1830.0],
  [1735.0, 1735.0, 1810.0, 1810.0],
  [1855.0, 1855.0, 1865.0, 1865.0],
  [1875.0, 1875.0, 1885.0, 1885.0],
  [1860.0, 1860.0, 1880.0, 1880.0],
  [1905.0, 1905.0, 1915.0, 1915.0],
  [1895.0, 1895.0, 1910.0, 1910.0],
  [1925.0, 1925.0, 1935.0, 1935.0],
  [1955.0, 1955.0, 1965.0, 1965.0],
  [1945.0, 1945.0, 1960.0, 1960.0],
  [1930.0, 1930.0, 1952.5, 1952.5],
  [1902.5, 1902.5, 1941.25, 1941.25],
  [1870.0, 1870.0, 1921.875, 1921.875],
  [1975.0, 1975.0, 1985.0, 1985.0],
  [1995.0, 1995.0, 2005.0, 2005.0],
  [1980.0, 1980.0, 2000.0, 2000.0],
  [2015.0, 2015.0, 2025.0, 2025.0],
  [2045.0, 2045.0, 2055.0, 2055.0],
  [2035.0, 2035.0, 2050.0, 2050.0],
  [2020.0, 2020.0, 2042.5, 2042.5],
  [1990.0, 1990.0, 2031.25, 2031.25],
  [1895.9375, 1895.9375, 2010.625, 2010.625],
  [1772.5, 1772.5, 1953.28125, 1953.28125],
  [1638.125, 1638.125, 1862.890625, 1862.890625],
  [2065.0, 2065.0, 2075.0, 2075.0],
  [2095.0, 2095.0, 2105.0, 2105.0],
  [2085.0, 2085.0, 2100.0, 2100.0],
  [2070.0, 2070.0, 2092.5, 2092.5],
  [2115.0, 2115.0, 2125.0, 2125.0],
  [2145.0, 2145.0, 2155.0, 2155.0],
  [2135.0, 2135.0, 2150.0, 2150.0],
  [2165.0, 2165.0, 2175.0, 2175.0],
  [2195.0, 2195.0, 2205.0, 2205.0],
  [2185.0, 2185.0, 2200.0, 2200.0],
  [2170.0, 2170.0, 2192.5, 2192.5],
  [2142.5, 2142.5, 2181.25, 2181.25],
  [2120.0, 2120.0, 2161.875, 2161.875],
  [2081.25, 2081.25, 2140.9375, 2140.9375],
  [2215.0, 2215.0, 2225.0, 2225.0],
  [2235.0, 2235.0, 2245.0, 2245.0],
  [2220.0, 2220.0, 2240.0, 2240.0],
  [2265.0, 2265.0, 2275.0, 2275.0],
  [2255.0, 2255.0, 2270.0, 2270.0],
  [2295.0, 2295.0, 2305.0, 2305.0],
  [2285.0, 2285.0, 2300.0, 2300.0],
  [2262.5, 2262.5, 2292.5, 2292.5],
  [2230.0, 2230.0, 2277.5, 2277.5],
  [2325.0, 2325.0, 2335.0, 2335.0],
  [2315.0, 2315.0, 2330.0, 2330.0],
  [2345.0, 2345.0, 2355.0, 2355.0],
  [2375.0, 2375.0, 2385.0, 2385.0],
  [2365.0, 2365.0, 2380.0, 2380.0],
  [2350.0, 2350.0, 2372.5, 2372.5],
  [2322.5, 2322.5, 2361.25, 2361.25],
  [2253.75, 2253.75, 2341.875, 2341.875],
  [2111.09375, 2111.09375, 2297.8125, 2297.8125],
  [2395.0, 2395.0, 2405.0, 2405.0],
  [2415.0, 2415.0, 2425.0, 2425.0],
  [2400.0, 2400.0, 2420.0, 2420.0],
  [2435.0, 2435.0, 2445.0, 2445.0],
  [2410.0, 2410.0, 2440.0, 2440.0],
  [2455.0, 2455.0, 2465.0, 2465.0],
  [2475.0, 2475.0, 2485.0, 2485.0],
  [2495.0, 2495.0, 2505.0, 2505.0],
  [2480.0, 2480.0, 2500.0, 2500.0],
  [2460.0, 2460.0, 2490.0, 2490.0],
  [2425.0, 2425.0, 2475.0, 2475.0],
  [2525.0, 2525.0, 2535.0, 2535.0],
  [2515.0, 2515.0, 2530.0, 2530.0],
  [2555.0, 2555.0, 2565.0, 2565.0],
  [2545.0, 2545.0, 2560.0, 2560.0],
  [2522.5, 2522.5, 2552.5, 2552.5],
  [2575.0, 2575.0, 2585.0, 2585.0],
  [2595.0, 2595.0, 2605.0, 2605.0],
  [2615.0, 2615.0, 2625.0, 2625.0],
  [2600.0, 2600.0, 2620.0, 2620.0],
  [2645.0, 2645.0, 2655.0, 2655.0],
  [2635.0, 2635.0, 2650.0, 2650.0],
  [2675.0, 2675.0, 2685.0, 2685.0],
  [2665.0, 2665.0, 2680.0, 2680.0],
  [2642.5, 2642.5, 2672.5, 2672.5],
  [2610.0, 2610.0, 2657.5, 2657.5],
  [2580.0, 2580.0, 2633.75, 2633.75],
  [2537.5, 2537.5, 2606.875, 2606.875],
  [2705.0, 2705.0, 2715.0, 2715.0],
  [2695.0, 2695.0, 2710.0, 2710.0],
  [2735.0, 2735.0, 2745.0, 2745.0],
  [2725.0, 2725.0, 2740.0, 2740.0],
  [2702.5, 2702.5, 2732.5, 2732.5],
  [2755.0, 2755.0, 2765.0, 2765.0],
  [2785.0, 2785.0, 2795.0, 2795.0],
  [2775.0, 2775.0, 2790.0, 2790.0],
  [2760.0, 2760.0, 2782.5, 2782.5],
  [2805.0, 2805.0, 2815.0, 2815.0],
  [2825.0, 2825.0, 2835.0, 2835.0],
  [2845.0, 2845.0, 2855.0, 2855.0],
  [2865.0, 2865.0, 2875.0, 2875.0],
  [2850.0, 2850.0, 2870.0, 2870.0],
  [2830.0, 2830.0, 2860.0, 2860.0],
  [2810.0, 2810.0, 2845.0, 2845.0],
  [2771.25, 2771.25, 2827.5, 2827.5],
  [2717.5, 2717.5, 2799.375, 2799.375],
  [2572.1875, 2572.1875, 2758.4375, 2758.4375],
  [2450.0, 2450.0, 2665.3125, 2665.3125],
  [2204.453125, 2204.453125, 2557.65625, 2557.65625],
  [1750.5078125, 1750.5078125, 2381.0546875, 2381.0546875],
  [559.560546875, 559.560546875, 2065.78125, 2065.78125],
  [2885.0, 2885.0, 2895.0, 2895.0],
  [2905.0, 2905.0, 2915.0, 2915.0],
  [2890.0, 2890.0, 2910.0, 2910.0],
  [2925.0, 2925.0, 2935.0, 2935.0],
  [2945.0, 2945.0, 2955.0, 2955.0],
  [2930.0, 2930.0, 2950.0, 2950.0],
  [2900.0, 2900.0, 2940.0, 2940.0],
  [2965.0, 2965.0, 2975.0, 2975.0],
  [2985.0, 2985.0, 2995.0, 2995.0],
  [3005.0, 3005.0, 3015.0, 3015.0],
  [2990.0, 2990.0, 3010.0, 3010.0],
  [2970.0, 2970.0, 3000.0, 3000.0],
  [3025.0, 3025.0, 3035.0, 3035.0],
  [3045.0, 3045.0, 3055.0, 3055.0],
  [3065.0, 3065.0, 3075.0, 3075.0],
  [3050.0, 3050.0, 3070.0, 3070.0],
  [3030.0, 3030.0, 3060.0, 3060.0],
  [2985.0, 2985.0, 3045.0, 3045.0],
  [2920.0, 2920.0, 3015.0, 3015.0],
  [3095.0, 3095.0, 3105.0, 3105.0],
  [3085.0, 3085.0, 3100.0, 3100.0],
  [3115.0, 3115.0, 3125.0, 3125.0],
  [3135.0, 3135.0, 3145.0, 3145.0],
  [3120.0, 3120.0, 3140.0, 3140.0],
  [3092.5, 3092.5, 3130.0, 3130.0],
  [3165.0, 3165.0, 3175.0, 3175.0],
  [3155.0, 3155.0, 3170.0, 3170.0],
  [3195.0, 3195.0, 3205.0, 3205.0],
  [3185.0, 3185.0, 3200.0, 3200.0],
  [3162.5, 3162.5, 3192.5, 3192.5],
  [3111.25, 3111.25, 3177.5, 3177.5],
  [3215.0, 3215.0, 3225.0, 3225.0],
  [3235.0, 3235.0, 3245.0, 3245.0],
  [3220.0, 3220.0, 3240.0, 3240.0],
  [3255.0, 3255.0, 3265.0, 3265.0],
  [3275.0, 3275.0, 3285.0, 3285.0],
  [3295.0, 3295.0, 3305.0, 3305.0],
  [3280.0, 3280.0, 3300.0, 3300.0],
  [3260.0, 3260.0, 3290.0, 3290.0],
  [3230.0, 3230.0, 3275.0, 3275.0],
  [3315.0, 3315.0, 3325.0, 3325.0],
  [3335.0, 3335.0, 3345.0, 3345.0],
  [3320.0, 3320.0, 3340.0, 3340.0],
  [3355.0, 3355.0, 3365.0, 3365.0],
  [3375.0, 3375.0, 3385.0, 3385.0],
  [3360.0, 3360.0, 3380.0, 3380.0],
  [3330.0, 3330.0, 3370.0, 3370.0],
  [3252.5, 3252.5, 3350.0, 3350.0],
  [3144.375, 3144.375, 3301.25, 3301.25],
  [2967.5, 2967.5, 3222.8125, 3222.8125],
  [3405.0, 3405.0, 3415.0, 3415.0],
  [3395.0, 3395.0, 3410.0, 3410.0],
  [3425.0, 3425.0, 3435.0, 3435.0],
  [3445.0, 3445.0, 3455.0, 3455.0],
  [3430.0, 3430.0, 3450.0, 3450.0],
  [3402.5, 3402.5, 3440.0, 3440.0],
  [3465.0, 3465.0, 3475.0, 3475.0],
  [3485.0, 3485.0, 3495.0, 3495.0],
  [3470.0, 3470.0, 3490.0, 3490.0],
  [3421.25, 3421.25, 3480.0, 3480.0],
  [3505.0, 3505.0, 3515.0, 3515.0],
  [3525.0, 3525.0, 3535.0, 3535.0],
  [3545.0, 3545.0, 3555.0, 3555.0],
  [3565.0, 3565.0, 3575.0, 3575.0],
  [3550.0, 3550.0, 3570.0, 3570.0],
  [3530.0, 3530.0, 3560.0, 3560.0],
  [3510.0, 3510.0, 3545.0, 3545.0],
  [3585.0, 3585.0, 3595.0, 3595.0],
  [3605.0, 3605.0, 3615.0, 3615.0],
  [3625.0, 3625.0, 3635.0, 3635.0],
  [3610.0, 3610.0, 3630.0, 3630.0],
  [3590.0, 3590.0, 3620.0, 3620.0],
  [3645.0, 3645.0, 3655.0, 3655.0],
  [3665.0, 3665.0, 3675.0, 3675.0],
  [3650.0, 3650.0, 3670.0, 3670.0],
  [3605.0, 3605.0, 3660.0, 3660.0],
  [3527.5, 3527.5, 3632.5, 3632.5],
  [3450.625, 3450.625, 3580.0, 3580.0],
  [3685.0, 3685.0, 3695.0, 3695.0],
  [3705.0, 3705.0, 3715.0, 3715.0],
  [3690.0, 3690.0, 3710.0, 3710.0],
  [3745.0, 3745.0, 3755.0, 3755.0],
  [3735.0, 3735.0, 3750.0, 3750.0],
  [3725.0, 3725.0, 3742.5, 3742.5],
  [3700.0, 3700.0, 3733.75, 3733.75],
  [3775.0, 3775.0, 3785.0, 3785.0],
  [3765.0, 3765.0, 3780.0, 3780.0],
  [3795.0, 3795.0, 3805.0, 3805.0],
  [3815.0, 3815.0, 3825.0, 3825.0],
  [3800.0, 3800.0, 3820.0, 3820.0],
  [3772.5, 3772.5, 3810.0, 3810.0],
  [3716.875, 3716.875, 3791.25, 3791.25],
  [3835.0, 3835.0, 3845.0, 3845.0],
  [3855.0, 3855.0, 3865.0, 3865.0],
  [3840.0, 3840.0, 3860.0, 3860.0],
  [3875.0, 3875.0, 3885.0, 3885.0],
  [3905.0, 3905.0, 3915.0, 3915.0],
  [3895.0, 3895.0, 3910.0, 3910.0],
  [3880.0, 3880.0, 3902.5, 3902.5],
  [3850.0, 3850.0, 3891.25, 3891.25],
  [3754.0625, 3754.0625, 3870.625, 3870.625],
  [3935.0, 3935.0, 3945.0, 3945.0],
  [3925.0, 3925.0, 3940.0, 3940.0],
  [3965.0, 3965.0, 3975.0, 3975.0],
  [3955.0, 3955.0, 3970.0, 3970.0],
  [3932.5, 3932.5, 3962.5, 3962.5],
  [3985.0, 3985.0, 3995.0, 3995.0],
  [4005.0, 4005.0, 4015.0, 4015.0],
  [3990.0, 3990.0, 4010.0, 4010.0],
  [4025.0, 4025.0, 4035.0, 4035.0],
  [4055.0, 4055.0, 4065.0, 4065.0],
  [4045.0, 4045.0, 4060.0, 4060.0],
  [4030.0, 4030.0, 4052.5, 4052.5],
  [4075.0, 4075.0, 4085.0, 4085.0],
  [4105.0, 4105.0, 4115.0, 4115.0],
  [4095.0, 4095.0, 4110.0, 4110.0],
  [4080.0, 4080.0, 4102.5, 4102.5],
  [4041.25, 4041.25, 4091.25, 4091.25],
  [4000.0, 4000.0, 4066.25, 4066.25],
  [3947.5, 3947.5, 4033.125, 4033.125],
  [4125.0, 4125.0, 4135.0, 4135.0],
  [4145.0, 4145.0, 4155.0, 4155.0],
  [4165.0, 4165.0, 4175.0, 4175.0],
  [4150.0, 4150.0, 4170.0, 4170.0],
  [4130.0, 4130.0, 4160.0, 4160.0],
  [4185.0, 4185.0, 4195.0, 4195.0],
  [4205.0, 4205.0, 4215.0, 4215.0],
  [4190.0, 4190.0, 4210.0, 4210.0],
  [4225.0, 4225.0, 4235.0, 4235.0],
  [4245.0, 4245.0, 4255.0, 4255.0],
  [4265.0, 4265.0, 4275.0, 4275.0],
  [4250.0, 4250.0, 4270.0, 4270.0],
  [4230.0, 4230.0, 4260.0, 4260.0],
  [4285.0, 4285.0, 4295.0, 4295.0],
  [4305.0, 4305.0, 4315.0, 4315.0],
  [4290.0, 4290.0, 4310.0, 4310.0],
  [4245.0, 4245.0, 4300.0, 4300.0],
  [4200.0, 4200.0, 4272.5, 4272.5],
  [4145.0, 4145.0, 4236.25, 4236.25],
  [3990.3125, 3990.3125, 4190.625, 4190.625],
  [3812.34375, 3812.34375, 4090.46875, 4090.46875],
  [3515.3125, 3515.3125, 3951.40625, 3951.40625],
  [3095.15625, 3095.15625, 3733.359375, 3733.359375],
  [4325.0, 4325.0, 4335.0, 4335.0],
  [4345.0, 4345.0, 4355.0, 4355.0],
  [4330.0, 4330.0, 4350.0, 4350.0],
  [4365.0, 4365.0, 4375.0, 4375.0],
  [4385.0, 4385.0, 4395.0, 4395.0],
  [4370.0, 4370.0, 4390.0, 4390.0],
  [4415.0, 4415.0, 4425.0, 4425.0],
  [4435.0, 4435.0, 4445.0, 4445.0],
  [4420.0, 4420.0, 4440.0, 4440.0],
  [4405.0, 4405.0, 4430.0, 4430.0],
  [4380.0, 4380.0, 4417.5, 4417.5],
  [4340.0, 4340.0, 4398.75, 4398.75],
  [4455.0, 4455.0, 4465.0, 4465.0],
  [4475.0, 4475.0, 4485.0, 4485.0],
  [4460.0, 4460.0, 4480.0, 4480.0],
  [4495.0, 4495.0, 4505.0, 4505.0],
  [4525.0, 4525.0, 4535.0, 4535.0],
  [4515.0, 4515.0, 4530.0, 4530.0],
  [4500.0, 4500.0, 4522.5, 4522.5],
  [4470.0, 4470.0, 4511.25, 4511.25],
  [4369.375, 4369.375, 4490.625, 4490.625],
  [4545.0, 4545.0, 4555.0, 4555.0],
  [4585.0, 4585.0, 4595.0, 4595.0],
  [4575.0, 4575.0, 4590.0, 4590.0],
  [4565.0, 4565.0, 4582.5, 4582.5],
  [4550.0, 4550.0, 4573.75, 4573.75],
  [4605.0, 4605.0, 4615.0, 4615.0],
  [4625.0, 4625.0, 4635.0, 4635.0],
  [4610.0, 4610.0, 4630.0, 4630.0],
  [4655.0, 4655.0, 4665.0, 4665.0],
  [4645.0, 4645.0, 4660.0, 4660.0],
  [4685.0, 4685.0, 4695.0, 4695.0],
  [4675.0, 4675.0, 4690.0, 4690.0],
  [4652.5, 4652.5, 4682.5, 4682.5],
  [4620.0, 4620.0, 4667.5, 4667.5],
  [4705.0, 4705.0, 4715.0, 4715.0],
  [4735.0, 4735.0, 4745.0, 4745.0],
  [4725.0, 4725.0, 4740.0, 4740.0],
  [4710.0, 4710.0, 4732.5, 4732.5],
  [4755.0, 4755.0, 4765.0, 4765.0],
  [4785.0, 4785.0, 4795.0, 4795.0],
  [4775.0, 4775.0, 4790.0, 4790.0],
  [4760.0, 4760.0, 4782.5, 4782.5],
  [4721.25, 4721.25, 4771.25, 4771.25],
  [4643.75, 4643.75, 4746.25, 4746.25],
  [4561.875, 4561.875, 4695.0, 4695.0],
  [4430.0, 4430.0, 4628.4375, 4628.4375],
  [4805.0, 4805.0, 4815.0, 4815.0],
  [4825.0, 4825.0, 4835.0, 4835.0],
  [4810.0, 4810.0, 4830.0, 4830.0],
  [4845.0, 4845.0, 4855.0, 4855.0],
  [4865.0, 4865.0, 4875.0, 4875.0],
  [4850.0, 4850.0, 4870.0, 4870.0],
  [4885.0, 4885.0, 4895.0, 4895.0],
  [4905.0, 4905.0, 4915.0, 4915.0],
  [4925.0, 4925.0, 4935.0, 4935.0],
  [4910.0, 4910.0, 4930.0, 4930.0],
  [4890.0, 4890.0, 4920.0, 4920.0],
  [4860.0, 4860.0, 4905.0, 4905.0],
  [4820.0, 4820.0, 4882.5, 4882.5],
  [4945.0, 4945.0, 4955.0, 4955.0],
  [4975.0, 4975.0, 4985.0, 4985.0],
  [4965.0, 4965.0, 4980.0, 4980.0],
  [4950.0, 4950.0, 4972.5, 4972.5],
  [4995.0, 4995.0, 5005.0, 5005.0],
  [5015.0, 5015.0, 5025.0, 5025.0],
  [5035.0, 5035.0, 5045.0, 5045.0],
  [5020.0, 5020.0, 5040.0, 5040.0],
  [5000.0, 5000.0, 5030.0, 5030.0],
  [4961.25, 4961.25, 5015.0, 5015.0],
  [4851.25, 4851.25, 4988.125, 4988.125],
  [5055.0, 5055.0, 5065.0, 5065.0],
  [5075.0, 5075.0, 5085.0, 5085.0],
  [5060.0, 5060.0, 5080.0, 5080.0],
  [5095.0, 5095.0, 5105.0, 5105.0],
  [5115.0, 5115.0, 5125.0, 5125.0],
  [5135.0, 5135.0, 5145.0, 5145.0],
  [5120.0, 5120.0, 5140.0, 5140.0],
  [5100.0, 5100.0, 5130.0, 5130.0],
  [5070.0, 5070.0, 5115.0, 5115.0],
  [5155.0, 5155.0, 5165.0, 5165.0],
  [5175.0, 5175.0, 5185.0, 5185.0],
  [5195.0, 5195.0, 5205.0, 5205.0],
  [5180.0, 5180.0, 5200.0, 5200.0],
  [5160.0, 5160.0, 5190.0, 5190.0],
  [5225.0, 5225.0, 5235.0, 5235.0],
  [5215.0, 5215.0, 5230.0, 5230.0],
  [5245.0, 5245.0, 5255.0, 5255.0],
  [5265.0, 5265.0, 5275.0, 5275.0],
  [5250.0, 5250.0, 5270.0, 5270.0],
  [5222.5, 5222.5, 5260.0, 5260.0],
  [5175.0, 5175.0, 5241.25, 5241.25],
  [5092.5, 5092.5, 5208.125, 5208.125],
  [4919.6875, 4919.6875, 5150.3125, 5150.3125],
  [5285.0, 5285.0, 5295.0, 5295.0],
  [5305.0, 5305.0, 5315.0, 5315.0],
  [5325.0, 5325.0, 5335.0, 5335.0],
  [5310.0, 5310.0, 5330.0, 5330.0],
  [5290.0, 5290.0, 5320.0, 5320.0],
  [5345.0, 5345.0, 5355.0, 5355.0],
  [5365.0, 5365.0, 5375.0, 5375.0],
  [5350.0, 5350.0, 5370.0, 5370.0],
  [5385.0, 5385.0, 5395.0, 5395.0],
  [5405.0, 5405.0, 5415.0, 5415.0],
  [5390.0, 5390.0, 5410.0, 5410.0],
  [5425.0, 5425.0, 5435.0, 5435.0],
  [5445.0, 5445.0, 5455.0, 5455.0],
  [5465.0, 5465.0, 5475.0, 5475.0],
  [5450.0, 5450.0, 5470.0, 5470.0],
  [5430.0, 5430.0, 5460.0, 5460.0],
  [5400.0, 5400.0, 5445.0, 5445.0],
  [5360.0, 5360.0, 5422.5, 5422.5],
  [5305.0, 5305.0, 5391.25, 5391.25],
  [5485.0, 5485.0, 5495.0, 5495.0],
  [5505.0, 5505.0, 5515.0, 5515.0],
  [5490.0, 5490.0, 5510.0, 5510.0],
  [5525.0, 5525.0, 5535.0, 5535.0],
  [5545.0, 5545.0, 5555.0, 5555.0],
  [5565.0, 5565.0, 5575.0, 5575.0],
  [5550.0, 5550.0, 5570.0, 5570.0],
  [5530.0, 5530.0, 5560.0, 5560.0],
  [5500.0, 5500.0, 5545.0, 5545.0],
  [5585.0, 5585.0, 5595.0, 5595.0],
  [5605.0, 5605.0, 5615.0, 5615.0],
  [5590.0, 5590.0, 5610.0, 5610.0],
  [5625.0, 5625.0, 5635.0, 5635.0],
  [5645.0, 5645.0, 5655.0, 5655.0],
  [5665.0, 5665.0, 5675.0, 5675.0],
  [5650.0, 5650.0, 5670.0, 5670.0],
  [5630.0, 5630.0, 5660.0, 5660.0],
  [5600.0, 5600.0, 5645.0, 5645.0],
  [5685.0, 5685.0, 5695.0, 5695.0],
  [5705.0, 5705.0, 5715.0, 5715.0],
  [5690.0, 5690.0, 5710.0, 5710.0],
  [5725.0, 5725.0, 5735.0, 5735.0],
  [5745.0, 5745.0, 5755.0, 5755.0],
  [5730.0, 5730.0, 5750.0, 5750.0],
  [5700.0, 5700.0, 5740.0, 5740.0],
  [5622.5, 5622.5, 5720.0, 5720.0],
  [5522.5, 5522.5, 5671.25, 5671.25],
  [5348.125, 5348.125, 5596.875, 5596.875],
  [5035.0, 5035.0, 5472.5, 5472.5],
  [4529.21875, 4529.21875, 5253.75, 5253.75],
  [3414.2578125, 3414.2578125, 4891.484375, 4891.484375],
  [1312.6708984375, 1312.6708984375, 4152.87109375, 4152.87109375]],
  'ivl': ['116',
  '117',
  '118',
  '119',
  '120',
  '121',
  '122',
  '125',
  '126',
  '123',
  '124',
  '131',
  '132',
  '129',
  '130',
  '127',
  '128',
  '133',
  '134',
  '135',
  '136',
  '137',
  '138',
  '573',
  '571',
  '572',
  '567',
  '568',
  '569',
  '570',
  '551',
  '552',
  '549',
  '550',
  '563',
  '564',
  '565',
  '566',
  '553',
  '554',
  '555',
  '556',
  '557',
  '558',
  '561',
  '562',
  '559',
  '560',
  '109',
  '110',
  '111',
  '112',
  '113',
  '114',
  '115',
  '548',
  '546',
  '547',
  '545',
  '543',
  '544',
  '541',
  '542',
  '355',
  '356',
  '357',
  '358',
  '349',
  '350',
  '353',
  '354',
  '351',
  '352',
  '301',
  '302',
  '307',
  '308',
  '305',
  '306',
  '303',
  '304',
  '258',
  '259',
  '260',
  '261',
  '253',
  '254',
  '257',
  '255',
  '256',
  '275',
  '273',
  '274',
  '271',
  '272',
  '269',
  '270',
  '264',
  '262',
  '263',
  '267',
  '268',
  '265',
  '266',
  '285',
  '283',
  '284',
  '240',
  '286',
  '287',
  '278',
  '276',
  '277',
  '279',
  '280',
  '281',
  '282',
  '313',
  '314',
  '315',
  '309',
  '310',
  '311',
  '312',
  '320',
  '321',
  '322',
  '318',
  '319',
  '316',
  '317',
  '329',
  '327',
  '328',
  '323',
  '324',
  '325',
  '326',
  '375',
  '376',
  '377',
  '378',
  '371',
  '372',
  '373',
  '374',
  '361',
  '362',
  '359',
  '360',
  '369',
  '370',
  '367',
  '368',
  '365',
  '366',
  '363',
  '364',
  '155',
  '156',
  '153',
  '154',
  '151',
  '152',
  '144',
  '145',
  '146',
  '147',
  '148',
  '149',
  '150',
  '157',
  '158',
  '161',
  '162',
  '159',
  '160',
  '163',
  '164',
  '165',
  '166',
  '167',
  '168',
  '169',
  '170',
  '179',
  '180',
  '181',
  '182',
  '176',
  '177',
  '178',
  '174',
  '175',
  '171',
  '172',
  '173',
  '183',
  '184',
  '185',
  '186',
  '190',
  '191',
  '187',
  '188',
  '189',
  '574',
  '575',
  '528',
  '529',
  '530',
  '539',
  '540',
  '533',
  '531',
  '532',
  '534',
  '535',
  '536',
  '537',
  '538',
  '105',
  '106',
  '107',
  '108',
  '102',
  '103',
  '104',
  '99',
  '100',
  '101',
  '96',
  '97',
  '98',
  '142',
  '143',
  '139',
  '140',
  '141',
  '243',
  '244',
  '245',
  '246',
  '241',
  '242',
  '251',
  '252',
  '249',
  '250',
  '247',
  '248',
  '379',
  '380',
  '381',
  '336',
  '382',
  '383',
  '347',
  '348',
  '339',
  '340',
  '337',
  '338',
  '344',
  '345',
  '346',
  '341',
  '342',
  '343',
  '335',
  '333',
  '334',
  '332',
  '330',
  '331',
  '291',
  '292',
  '288',
  '289',
  '290',
  '299',
  '300',
  '297',
  '298',
  '295',
  '296',
  '293',
  '294',
  '45',
  '46',
  '0',
  '47',
  '43',
  '44',
  '41',
  '42',
  '1',
  '2',
  '3',
  '4',
  '5',
  '6',
  '11',
  '12',
  '9',
  '10',
  '7',
  '8',
  '201',
  '199',
  '200',
  '195',
  '196',
  '197',
  '198',
  '237',
  '238',
  '239',
  '192',
  '193',
  '194',
  '57',
  '58',
  '55',
  '56',
  '49',
  '50',
  '51',
  '52',
  '53',
  '54',
  '93',
  '94',
  '48',
  '95',
  '91',
  '92',
  '89',
  '90',
  '206',
  '207',
  '208',
  '209',
  '210',
  '211',
  '212',
  '204',
  '205',
  '202',
  '203',
  '13',
  '14',
  '19',
  '20',
  '15',
  '16',
  '17',
  '18',
  '67',
  '68',
  '63',
  '64',
  '65',
  '66',
  '61',
  '62',
  '59',
  '60',
  '222',
  '223',
  '220',
  '221',
  '227',
  '226',
  '224',
  '225',
  '217',
  '218',
  '219',
  '215',
  '216',
  '213',
  '214',
  '233',
  '234',
  '235',
  '236',
  '228',
  '229',
  '230',
  '231',
  '232',
  '35',
  '36',
  '37',
  '38',
  '39',
  '40',
  '21',
  '22',
  '23',
  '24',
  '30',
  '31',
  '34',
  '32',
  '33',
  '25',
  '26',
  '27',
  '28',
  '29',
  '87',
  '88',
  '83',
  '84',
  '85',
  '86',
  '69',
  '70',
  '71',
  '72',
  '81',
  '82',
  '79',
  '80',
  '77',
  '78',
  '75',
  '76',
  '73',
  '74',
  '505',
  '506',
  '503',
  '504',
  '509',
  '510',
  '507',
  '508',
  '515',
  '511',
  '512',
  '513',
  '514',
  '501',
  '502',
  '499',
  '500',
  '516',
  '517',
  '518',
  '519',
  '520',
  '497',
  '498',
  '493',
  '494',
  '495',
  '496',
  '489',
  '490',
  '491',
  '492',
  '486',
  '487',
  '488',
  '483',
  '484',
  '485',
  '521',
  '522',
  '523',
  '524',
  '525',
  '526',
  '527',
  '480',
  '481',
  '482',
  '407',
  '408',
  '409',
  '410',
  '411',
  '412',
  '413',
  '414',
  '419',
  '420',
  '417',
  '418',
  '415',
  '416',
  '427',
  '428',
  '431',
  '429',
  '430',
  '421',
  '422',
  '423',
  '424',
  '425',
  '426',
  '403',
  '404',
  '405',
  '406',
  '397',
  '398',
  '401',
  '402',
  '399',
  '400',
  '395',
  '396',
  '393',
  '394',
  '391',
  '392',
  '386',
  '384',
  '385',
  '387',
  '388',
  '389',
  '390',
  '469',
  '470',
  '471',
  '472',
  '473',
  '474',
  '455',
  '456',
  '457',
  '458',
  '461',
  '462',
  '459',
  '460',
  '467',
  '468',
  '465',
  '466',
  '463',
  '464',
  '451',
  '452',
  '453',
  '454',
  '445',
  '446',
  '447',
  '448',
  '449',
  '450',
  '435',
  '436',
  '437',
  '438',
  '443',
  '444',
  '441',
  '442',
  '439',
  '440',
  '475',
  '476',
  '477',
  '478',
  '433',
  '434',
  '432',
  '479'],
  'leaves': [116,
  117,
  118,
  119,
  120,
  121,
  122,
  125,
  126,
  123,
  124,
  131,
  132,
  129,
  130,
  127,
  128,
  133,
  134,
  135,
  136,
  137,
  138,
  573,
  571,
  572,
  567,
  568,
  569,
  570,
  551,
  552,
  549,
  550,
  563,
  564,
  565,
  566,
  553,
  554,
  555,
  556,
  557,
  558,
  561,
  562,
  559,
  560,
  109,
  110,
  111,
  112,
  113,
  114,
  115,
  548,
  546,
  547,
  545,
  543,
  544,
  541,
  542,
  355,
  356,
  357,
  358,
  349,
  350,
  353,
  354,
  351,
  352,
  301,
  302,
  307,
  308,
  305,
  306,
  303,
  304,
  258,
  259,
  260,
  261,
  253,
  254,
  257,
  255,
  256,
  275,
  273,
  274,
  271,
  272,
  269,
  270,
  264,
  262,
  263,
  267,
  268,
  265,
  266,
  285,
  283,
  284,
  240,
  286,
  287,
  278,
  276,
  277,
  279,
  280,
  281,
  282,
  313,
  314,
  315,
  309,
  310,
  311,
  312,
  320,
  321,
  322,
  318,
  319,
  316,
  317,
  329,
  327,
  328,
  323,
  324,
  325,
  326,
  375,
  376,
  377,
  378,
  371,
  372,
  373,
  374,
  361,
  362,
  359,
  360,
  369,
  370,
  367,
  368,
  365,
  366,
  363,
  364,
  155,
  156,
  153,
  154,
  151,
  152,
  144,
  145,
  146,
  147,
  148,
  149,
  150,
  157,
  158,
  161,
  162,
  159,
  160,
  163,
  164,
  165,
  166,
  167,
  168,
  169,
  170,
  179,
  180,
  181,
  182,
  176,
  177,
  178,
  174,
  175,
  171,
  172,
  173,
  183,
  184,
  185,
  186,
  190,
  191,
  187,
  188,
  189,
  574,
  575,
  528,
  529,
  530,
  539,
  540,
  533,
  531,
  532,
  534,
  535,
  536,
  537,
  538,
  105,
  106,
  107,
  108,
  102,
  103,
  104,
  99,
  100,
  101,
  96,
  97,
  98,
  142,
  143,
  139,
  140,
  141,
  243,
  244,
  245,
  246,
  241,
  242,
  251,
  252,
  249,
  250,
  247,
  248,
  379,
  380,
  381,
  336,
  382,
  383,
  347,
  348,
  339,
  340,
  337,
  338,
  344,
  345,
  346,
  341,
  342,
  343,
  335,
  333,
  334,
  332,
  330,
  331,
  291,
  292,
  288,
  289,
  290,
  299,
  300,
  297,
  298,
  295,
  296,
  293,
  294,
  45,
  46,
  0,
  47,
  43,
  44,
  41,
  42,
  1,
  2,
  3,
  4,
  5,
  6,
  11,
  12,
  9,
  10,
  7,
  8,
  201,
  199,
  200,
  195,
  196,
  197,
  198,
  237,
  238,
  239,
  192,
  193,
  194,
  57,
  58,
  55,
  56,
  49,
  50,
  51,
  52,
  53,
  54,
  93,
  94,
  48,
  95,
  91,
  92,
  89,
  90,
  206,
  207,
  208,
  209,
  210,
  211,
  212,
  204,
  205,
  202,
  203,
  13,
  14,
  19,
  20,
  15,
  16,
  17,
  18,
  67,
  68,
  63,
  64,
  65,
  66,
  61,
  62,
  59,
  60,
  222,
  223,
  220,
  221,
  227,
  226,
  224,
  225,
  217,
  218,
  219,
  215,
  216,
  213,
  214,
  233,
  234,
  235,
  236,
  228,
  229,
  230,
  231,
  232,
  35,
  36,
  37,
  38,
  39,
  40,
  21,
  22,
  23,
  24,
  30,
  31,
  34,
  32,
  33,
  25,
  26,
  27,
  28,
  29,
  87,
  88,
  83,
  84,
  85,
  86,
  69,
  70,
  71,
  72,
  81,
  82,
  79,
  80,
  77,
  78,
  75,
  76,
  73,
  74,
  505,
  506,
  503,
  504,
  509,
  510,
  507,
  508,
  515,
  511,
  512,
  513,
  514,
  501,
  502,
  499,
  500,
  516,
  517,
  518,
  519,
  520,
  497,
  498,
  493,
  494,
  495,
  496,
  489,
  490,
  491,
  492,
  486,
  487,
  488,
  483,
  484,
  485,
  521,
  522,
  523,
  524,
  525,
  526,
  527,
  480,
  481,
  482,
  407,
  408,
  409,
  410,
  411,
  412,
  413,
  414,
  419,
  420,
  417,
  418,
  415,
  416,
  427,
  428,
  431,
  429,
  430,
  421,
  422,
  423,
  424,
  425,
  426,
  403,
  404,
  405,
  406,
  397,
  398,
  401,
  402,
  399,
  400,
  395,
  396,
  393,
  394,
  391,
  392,
  386,
  384,
  385,
  387,
  388,
  389,
  390,
  469,
  470,
  471,
  472,
  473,
  474,
  455,
  456,
  457,
  458,
  461,
  462,
  459,
  460,
  467,
  468,
  465,
  466,
  463,
  464,
  451,
  452,
  453,
  454,
  445,
  446,
  447,
  448,
  449,
  450,
  435,
  436,
  437,
  438,
  443,
  444,
  441,
  442,
  439,
  440,
  475,
  476,
  477,
  478,
  433,
  434,
  432,
  479]}
#+END_EXAMPLE
[[file:./img/dendrogram.png]]
:END:

#+BEGIN_SRC ipython :session :ipyfile ./img/elbow.png :exports both :results raw drawer
  plt.figure()
  plt.plot(range(1, len(linkage)+1), linkage[::-1, 2])
  ax = plt.gca()
  ax.set_xlim([0,50])
  ax.set_ylim([0,8])
  ax.set_xlabel("Number of clusters")
  ax.set_ylabel("Between clusters distance")
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[385]:
: Text(0,0.5,'Between clusters distance')
[[file:./img/elbow.png]]
:END:


#+BEGIN_SRC ipython :session :exports both :results raw drawer
  elbow = np.diff(linkage[::-1, 2], 2)
  n_clust1 = elbow.argmax()+2
  elbow[elbow.argmax()] = 0
  n_clust2 = elbow.argmax()+2
  [n_clust1, n_clust2]
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[386]:
: [3, 5]
:END:

** Clustering methods comparison  

  #+BEGIN_SRC ipython :session :ipyfile ./img/n_clust1_TSNE.png :exports both :results raw drawer
    from sklearn.manifold import TSNE
    n_clusters = n_clust1
    clusters = hcl.fcluster(linkage, t=n_clusters, criterion="maxclust")

    tsne_2dim = TSNE(n_components=2).fit_transform(consommation.T)

    plt.figure()
    plt.scatter(tsne_2dim[:, 0], tsne_2dim[:, 1], c=clusters, cmap=plt.cm.get_cmap('Paired', n_clusters), alpha=0.3)
    ax = plt.gca()
    ax.set_xlabel("x-tsne")
    ax.set_ylabel("y-tsne")
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[279]:
  : Text(0,0.5,'y-tsne')
  [[file:./img/n_clust1_TSNE.png]]
  :END:

  #+BEGIN_SRC ipython :session :ipyfile ./img/n_clust1_TSNE.png :exports both :results raw drawer
    from sklearn.manifold import TSNE
    n_clusters = n_clust1
    clusters = hcl.fcluster(linkage, t=n_clusters, criterion="maxclust")

    tsne_2dim = TSNE(n_components=2, metric="precomputed").fit_transform(DM_GCC)

    plt.figure()
    plt.scatter(tsne_2dim[:, 0], tsne_2dim[:, 1], c=clusters, cmap=plt.cm.get_cmap('Paired', n_clusters), alpha=0.3)
    ax = plt.gca()
    ax.set_xlabel("x-tsne")
    ax.set_ylabel("y-tsne")
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[387]:
  : Text(0,0.5,'y-tsne')
  [[file:./img/n_clust1_TSNE.png]]
  :END:



  #+BEGIN_SRC ipython :session :ipyfile ./img/n_clust2_TSNE.png :exports both :results raw drawer
    n_clusters = n_clust2
    clusters = hcl.fcluster(linkage, t=n_clusters, criterion="maxclust")

    tsne_2dim = TSNE(n_components=2, metric="precomputed").fit_transform(DM_GCC)

    plt.figure()
    plt.scatter(tsne_2dim[:, 0], tsne_2dim[:, 1], c=clusters, cmap=plt.cm.get_cmap('Paired', n_clusters), alpha=0.3)
    ax = plt.gca()
    ax.set_xlabel("x-tsne")
    ax.set_ylabel("y-tsne")
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[388]:
  : Text(0,0.5,'y-tsne')
  [[file:./img/n_clust2_TSNE.png]]
  :END:



#+BEGIN_SRC ipython :session :ipyfile ./img/n_clust1_spectral.png :exports both :results raw drawer
  from sklearn.cluster import SpectralClustering

  n_clusters = n_clust1
  clusters = SpectralClustering(n_clusters, affinity="precomputed").fit_predict(DM_GCC)

  tsne_2dim = TSNE(n_components=2, metric="precomputed").fit_transform(DM_GCC)

  plt.figure()
  plt.scatter(tsne_2dim[:, 0], tsne_2dim[:, 1], c=clusters, cmap=plt.cm.get_cmap('Paired', n_clusters), alpha=0.3)
  ax = plt.gca()
  ax.set_xlabel("x-tsne")
  ax.set_ylabel("y-tsne")
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[394]:
: Text(0,0.5,'y-tsne')
[[file:./img/n_clust1_spectral.png]]
:END:


#+BEGIN_SRC ipython :session :ipyfile ./img/n_clust2_spectral.png :exports both :results raw drawer
  from sklearn.cluster import SpectralClustering

  n_clusters = n_clust2
  clusters = SpectralClustering(n_clusters, affinity="precomputed").fit_predict(DM_GCC)

  tsne_2dim = TSNE(n_components=2, metric="precomputed").fit_transform(DM_GCC)

  plt.figure()
  plt.scatter(tsne_2dim[:, 0], tsne_2dim[:, 1], c=clusters, cmap=plt.cm.get_cmap('Paired', n_clusters), alpha=0.3)
  ax = plt.gca()
  ax.set_xlabel("x-tsne")
  ax.set_ylabel("y-tsne")
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[395]:
: Text(0,0.5,'y-tsne')
[[file:./img/n_clust2_spectral.png]]
:END:

#+BEGIN_SRC ipython :session :ipyfile ./img/n_clust1_kmeans.png  :exports both :results raw drawer
from sklearn.cluster import KMeans

n_clusters = n_clust1
eigen_values, eigen_vectors = np.linalg.eigh(DM_GCC)
clusters = KMeans(n_clusters=n_clusters, init='k-means++').fit_predict(eigen_vectors[:, 2:4])

plt.figure()
plt.scatter(tsne_2dim[:, 0], tsne_2dim[:, 1], c=clusters, cmap=plt.cm.get_cmap('Paired', n_clusters), alpha=0.3)
ax = plt.gca()
ax.set_xlabel("x-tsne")
ax.set_ylabel("y-tsne")
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[393]:
: Text(0,0.5,'y-tsne')
[[file:./img/n_clust1_kmeans.png]]
:END:

#+BEGIN_SRC ipython :session :ipyfile ./img/n_clust2_kmeans.png  :exports both :results raw drawer
from sklearn.cluster import KMeans

n_clusters = n_clust2
eigen_values, eigen_vectors = np.linalg.eigh(DM_GCC)
clusters = KMeans(n_clusters=n_clusters, init='k-means++').fit_predict(eigen_vectors[:, 2:4])

plt.figure()
plt.scatter(tsne_2dim[:, 0], tsne_2dim[:, 1], c=clusters, cmap=plt.cm.get_cmap('Paired', n_clusters), alpha=0.3)
ax = plt.gca()
ax.set_xlabel("x-tsne")
ax.set_ylabel("y-tsne")
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[396]:
: Text(0,0.5,'y-tsne')
[[file:./img/n_clust2_kmeans.png]]
:END:

#+BEGIN_SRC ipython :session :ipyfile ./img/n_clust1_dbscan.png  :exports both :results raw drawer
    from sklearn.cluster import DBSCAN

    for eps in np.arange(0.0001, 0.01, 0.0001):
        clusters = DBSCAN(eps=eps, min_samples=10, metric="precomputed").fit_predict(DM_GCC)
        n_clusters = len(np.unique(clusters[clusters>0]))
        if n_clusters == n_clust1:
          plt.figure()
          plt.scatter(tsne_2dim[:, 0], tsne_2dim[:, 1], c=clusters, cmap=plt.cm.get_cmap('Paired', n_clusters), alpha=0.3)
          ax = plt.gca()
          ax.set_xlabel("x-tsne")
          ax.set_ylabel("y-tsne")
          break
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[397]:
:END:

#+BEGIN_SRC ipython :session :ipyfile ./img/n_clust2_dbscan.png  :exports both :results raw drawer
    from sklearn.cluster import DBSCAN

    for eps in np.arange(0.0001, 0.01, 0.0001):
        clusters = DBSCAN(eps=eps, min_samples=10, metric="precomputed").fit_predict(DM_GCC)
        n_clusters = len(np.unique(clusters[clusters>0]))
        if n_clusters == n_clust2:
          plt.figure()
          plt.scatter(tsne_2dim[:, 0], tsne_2dim[:, 1], c=clusters, cmap=plt.cm.get_cmap('Paired', n_clusters), alpha=0.3)
          ax = plt.gca()
          ax.set_xlabel("x-tsne")
          ax.set_ylabel("y-tsne")
          break
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[398]:
:END:

#+BEGIN_SRC ipython :session :ipyfile ./img/regions_dbscan.png  :exports both :results raw drawer
  from sklearn.cluster import DBSCAN

  for eps in np.arange(0.0001, 0.01, 0.0001):
      clusters = DBSCAN(eps=eps, min_samples=10, metric="precomputed").fit_predict(DM_GCC)
      n_clusters = len(np.unique(clusters[clusters>0]))
      if n_clusters == len(np.unique(consommation.columns.get_level_values("Périmètre"))):
          plt.figure()
          plt.scatter(tsne_2dim[:, 0], tsne_2dim[:, 1], c=clusters, cmap=plt.cm.get_cmap('Paired', n_clusters), alpha=0.3)
          ax = plt.gca()
          ax.set_xlabel("x-tsne")
          ax.set_ylabel("y-tsne")
          break

#+END_SRC

#+RESULTS:
:RESULTS:
[[file:./img/regions_dbscan.png]]
:END:


* Mapping the clusters

#+BEGIN_SRC ipython :session :exports both
  import numpy as np

  n_clusters = 3
  clusters = hcl.fcluster(linkage, t=n_clusters, criterion="maxclust")
  regions = [string.split('_')[0] for string in consommation.columns]
  times = [string.split('_')[1] for string in consommation.columns]
  consommation_clusters = pd.DataFrame(np.transpose([regions,
                                                  times,
                                                  list(clusters)]), columns=["Region", "Time", "Cluster"])
#+END_SRC

#+RESULTS:
: # Out[8]:

#+BEGIN_SRC ipython :session :exports both
  region_cluster = consommation_clusters.groupby(by="Region")["Cluster"].value_counts().index.to_frame()
  region_cluster.index = region_cluster["Region"].values

  region_codes = pd.read_csv("./data/frenchRegions.csv")

  region_cluster["Region"].isin(region_codes["Region"])
  region_cluster["region_match"] = region_cluster["Region"]

  region_codes = {}
  region_codes["Auvergne-Rhône-Alpes"] = [83, 82]
  region_codes["Bourgogne-Franche-Comté"] = [26, 43]
  region_codes["Bretagne"] = [53]
  region_codes["Centre-Val de Loire"] = [24]
  region_codes["Grand-Est"] = [42, 21, 41]
  region_codes["Hauts-de-France"] = [31, 22]
  region_codes["Ile-de-France"] = [11]
  region_codes["Normandie"] = [23, 25]
  region_codes["Nouvelle-Aquitaine"] = [72, 54, 74]
  region_codes["Occitanie"] = [91, 73]
  region_codes["PACA"] = [93]
  region_codes["Pays-de-la-Loire"] = [52]
#+END_SRC

#+RESULTS:
: # Out[9]:


#+BEGIN_SRC ipython :session :exports code :results silent
import pygal
from itertools import chain

fr_chart = pygal.maps.fr.Regions()
fr_chart.title = 'Regions clusters'
for cluster in np.unique(region_cluster["Cluster"]):
    fr_chart.add("Cluster " + str(cluster), 
                 list(chain.from_iterable([region_codes[region] 
                                           for region in region_cluster.loc[
                                               region_cluster["Cluster"]==cluster, "Region"].values])))
fr_chart.render_to_file("./img/regions_clusters.svg")
#+END_SRC

[[file:./img/regions_clusters.svg]]


* Check within regions clusters


* References:
   Ando, T. and Bai, J. (2016) Clustering huge number of financial time series: A panel data approach with high-dimensional predictors and factor structures. To appear at JASA. Available at: http://dx.doi.org/10.1080/01621459.2016.1195743
